{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>\ud83c\udfe0 Home | \u26a1 Angular | \ud83d\udfe6 TypeScript | \u269b React | \ud83d\udfe9 Node.js</p>"},{"location":"angular/","title":"Overview","text":""},{"location":"angular/#angular-docs-navigation","title":"\ud83d\udcda Angular Docs Navigation","text":"<p>Introduction \u2022 Components \u2022 Access HTML \u2022 ng-content \u2022 Lifecycle \u2022 Directives \u2022 Interceptor </p> <p>Forms \u2022 Routing \u2022 Pipes \u2022 HTTP \u2022 JIT &amp; AOT \u2022 Service \u2022 RxJS </p> <p>Regex \u2022 Versions \u2022 Signal \u2022 State Mgmt \u2022 Resource API \u2022 NgRx </p>"},{"location":"angular/000/","title":"000","text":""},{"location":"angular/000/#angular-documentation","title":"\ud83d\udcda Angular Documentation","text":""},{"location":"angular/000/#index","title":"\ud83d\udd17 Index","text":"<p>Angular Introduction Components Access HTML element ng-content Lifecycle Hook Directives Interceptor Forms (Template &amp; Reactive) Routing Pipes HTTP Module JIT &amp; AOT Service RxJS Regular Expression Angular Versions Signal State Management Resource API NgRx</p>"},{"location":"angular/001/","title":"\ud83d\udcd8 Introduction to Angular","text":"<ul> <li>Angular is a TypeScript-based framework (not just plain JavaScript) used for building modern web applications.</li> <li>It follows the MVVM (Model\u2013View\u2013ViewModel) architecture, which separates UI (View) from business logic (Model), making apps easier to maintain.</li> <li>Angular allows us to build Single Page Applications (SPAs) \u2192 applications that load once and then update dynamically without refreshing the whole page (thanks to Angular routing).</li> <li> <p>It provides powerful features like:</p> </li> <li> <p>\u2705 Components \u2192 Break down a big UI into small reusable parts (like \u201cEmployeeCard\u201d, \u201cNavbar\u201d).</p> </li> <li>\u2705 Routing \u2192 Navigate between views (e.g., Dashboard \u2192 Employees) without reload.</li> <li>\u2705 Dependency Injection (DI) \u2192 Share services (like APIs, Auth) across components easily.</li> <li>\u2705 Forms \u2192 Build and validate forms (template-driven &amp; reactive forms).</li> <li>\u2705 RxJS (Reactive Extensions for JavaScript) \u2192 Handle async data streams (APIs, events).</li> <li>\u2705 Testing tools \u2192 Built-in support for unit testing and end-to-end testing.</li> <li>\u2705 Performance tools \u2192 Ahead-of-Time (AOT) compilation, Change Detection strategies, Lazy Loading.</li> <li>\u2705 Cross-platform support \u2192 Web, Mobile (via Ionic), and even Desktop apps.</li> </ul>"},{"location":"angular/001/#real-life-analogy","title":"\ud83d\udca1 Real-life Analogy","text":"<p>Think of Angular as a company:</p> <ul> <li>Modules = Departments (HR, Finance, IT).</li> <li>Components = Employees in those departments (each doing a small job).</li> <li>Services = Shared resources like cafeteria, security, or internet (used by many employees).</li> <li>Routing = Office directory that helps you move between departments without leaving the building.</li> </ul>"},{"location":"angular/001/#why-use-angular","title":"\ud83d\udd11 Why Use Angular?","text":"<ul> <li>Maintained by Google \u2192 strong community &amp; regular updates.</li> <li>Encourages clean code structure and best practices.</li> <li>Great for enterprise-level apps like HRMS, CRMs, e-commerce, dashboards.</li> </ul> <p>\ud83d\udccc Next: Components \u2192</p>"},{"location":"angular/002/","title":"\ud83d\udcd8 Components in Angular","text":"<ul> <li>Components are the smallest UI building blocks in Angular applications.  </li> <li>They are reusable \u2192 one component can be used in multiple places.  </li> <li>Each component has:</li> <li>HTML Template \u2192 Defines the view (UI).  </li> <li>CSS / SCSS Styles \u2192 Defines look &amp; feel.  </li> <li>TypeScript Class \u2192 Defines logic (data + functions).  </li> </ul>"},{"location":"angular/002/#example-usage","title":"\u2705 Example Usage","text":"<pre><code>&lt;!-- Reusing components --&gt;\n&lt;app-header&gt;&lt;/app-header&gt;\n&lt;app-sidebar&gt;&lt;/app-sidebar&gt;\n&lt;app-navbar&gt;&lt;/app-navbar&gt;\n&lt;app-footer&gt;&lt;/app-footer&gt;\n</code></pre>"},{"location":"angular/002/#creating-a-component","title":"\ud83d\udee0 Creating a Component","text":"<p>CLI command:</p> <pre><code>ng generate component user\n# or shorthand\nng g c user\n</code></pre> <p>This generates:  </p> <pre><code>user/\n  \u251c\u2500\u2500 user.component.ts\n  \u251c\u2500\u2500 user.component.html\n  \u251c\u2500\u2500 user.component.css\n  \u2514\u2500\u2500 user.component.spec.ts\n</code></pre>"},{"location":"angular/002/#example-component","title":"\ud83d\udcc4 Example Component","text":"<pre><code>// user.component.ts\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-user',\n  templateUrl: './user.component.html',\n  styleUrls: ['./user.component.css']\n})\nexport class UserComponent {\n  name = 'Rohit';\n  age = 25;\n}\n</code></pre> <pre><code>&lt;!-- user.component.html --&gt;\n&lt;h2&gt;User Info&lt;/h2&gt;\n&lt;p&gt;Name: {{ name }}&lt;/p&gt;\n&lt;p&gt;Age: {{ age }}&lt;/p&gt;\n</code></pre> <p>\ud83d\udca1 Real-life use case: In an HRMS app \u2192 You can create a <code>user-profile</code> component to show employee details.</p>"},{"location":"angular/002/#types-of-selectors","title":"\ud83c\udfaf Types of Selectors","text":"<p>Angular lets you define how components are used in HTML:</p> <ol> <li>Element Selector (Default) </li> <li>Declared as: <code>ts      selector: 'app-user'</code></li> <li> <p>Used as: <code>html      &lt;app-user&gt;&lt;/app-user&gt;</code></p> </li> <li> <p>Attribute Selector </p> </li> <li>Declared as: <code>ts      selector: '[app-name]'</code></li> <li> <p>Used as: <code>html      &lt;div app-name&gt;&lt;/div&gt;</code></p> </li> <li> <p>Class Selector </p> </li> <li>Declared as: <code>ts      selector: '.app-name'</code></li> <li>Used as: <code>html      &lt;div class=\"app-name\"&gt;&lt;/div&gt;</code></li> </ol>"},{"location":"angular/002/#parent-child-components","title":"\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67 Parent &amp; Child Components","text":"<ul> <li>Components can be nested (child components inside parent components).  </li> <li>Example: <code>html   &lt;app-dashboard&gt;     &lt;app-user-list&gt;&lt;/app-user-list&gt;     &lt;app-reports&gt;&lt;/app-reports&gt;   &lt;/app-dashboard&gt;</code></li> </ul>"},{"location":"angular/002/#styling-components","title":"\ud83c\udfa8 Styling Components","text":"<ul> <li>Each component can have its own CSS/SCSS files.  </li> <li>By default, styles apply only to that component (not global).  </li> <li>This is possible because Angular uses View Encapsulation.  </li> </ul>"},{"location":"angular/002/#view-encapsulation-in-angular","title":"\ud83d\udd12 View Encapsulation in Angular","text":"<p>Encapsulation = Controlling how CSS styles are applied to components.  </p> <pre><code>import { Component, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'app-user',\n  templateUrl: './user.component.html',\n  styleUrls: ['./user.component.css'],\n  encapsulation: ViewEncapsulation.Emulated // default\n})\nexport class UserComponent {}\n</code></pre>"},{"location":"angular/002/#types-of-viewencapsulation","title":"\ud83d\udee0 Types of ViewEncapsulation","text":"<ol> <li>Emulated (Default) </li> <li>Angular adds unique attributes to isolate styles.  </li> <li>Prevents styles from leaking outside. <code>css    /* user.component.css */    h2 { color: blue; }</code>    \u2705 Only <code>&lt;h2&gt;</code> inside <code>&lt;app-user&gt;</code> becomes blue.</li> </ol> <ol> <li>None </li> <li>Styles are global \u2192 affect all components.  </li> <li>Not recommended (may cause conflicts). <code>ts    encapsulation: ViewEncapsulation.None</code>    \u2705 Example: <code>css    .btn { color: red; }</code>    \u2192 All buttons in the entire app turn red.</li> </ol> <ol> <li>ShadowDom </li> <li>Uses the browser\u2019s native Shadow DOM.  </li> <li>Styles are isolated inside the component\u2019s shadow root.  </li> <li>Global styles do not apply here. <code>ts    encapsulation: ViewEncapsulation.ShadowDom</code></li> </ol> <p>\ud83d\udca1 Real-life analogy: Think of Encapsulation as soundproof rooms in a house: - Emulated \u2192 Your music stays in your room, no noise outside. - None \u2192 Everyone in the house hears your music. - ShadowDom \u2192 A special high-tech soundproofing (browser\u2019s built-in).  </p>"},{"location":"angular/003/","title":"\ud83d\udcd8 Accessing HTML Elements in Angular","text":""},{"location":"angular/003/#template-reference-variable","title":"\ud83c\udff7 Template Reference Variable (<code>#</code>)","text":"<ul> <li>In an HTML template, you can use <code>#</code> to create a reference to an element.</li> <li> <p>This reference can be used:</p> </li> <li> <p>Directly in the template (binding, event handling).</p> </li> <li>Or inside TypeScript code via <code>@ViewChild()</code>.</li> </ul> <p>Example:</p> <pre><code>&lt;!-- user.component.html --&gt;\n&lt;input type=\"text\" #userInput placeholder=\"Enter your name\"&gt;\n&lt;button (click)=\"showInput(userInput.value)\"&gt;Show&lt;/button&gt;\n</code></pre> <pre><code>// user.component.ts\nshowInput(value: string) {\n  console.log('User entered:', value);\n}\n</code></pre> <p>\ud83d\udc49 Here, <code>#userInput</code> is a template reference variable, and we use it directly in HTML.</p>"},{"location":"angular/003/#using-viewchild-with-elementref","title":"\ud83d\udee0 Using <code>@ViewChild()</code> with <code>ElementRef</code>","text":"<ul> <li><code>@ViewChild()</code> is used to access a single DOM element or Angular child component.</li> <li>It works with the template reference variable (<code>#name</code>).</li> <li><code>ElementRef</code> is a wrapper around the native DOM element.</li> </ul> <pre><code>// user.component.ts\nimport { Component, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\n\n@Component({\n  selector: 'app-user',\n  templateUrl: './user.component.html'\n})\nexport class UserComponent implements AfterViewInit {\n  @ViewChild('userInput', { static: false }) userInput!: ElementRef;\n\n  ngAfterViewInit() {\n    console.log('Input element:', this.userInput.nativeElement);\n  }\n\n  getInput() {\n    console.log('Input Value:', this.userInput.nativeElement.value);\n  }\n}\n</code></pre> <pre><code>&lt;!-- user.component.html --&gt;\n&lt;input type=\"text\" #userInput placeholder=\"Type something\"&gt;\n&lt;button (click)=\"getInput()\"&gt;Log Input&lt;/button&gt;\n</code></pre> <p>\ud83d\udc49 <code>this.userInput.nativeElement.value</code> gives the text entered.</p>"},{"location":"angular/003/#using-viewchildren-multiple-elements","title":"\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67 Using <code>@ViewChildren()</code> (Multiple Elements)","text":"<ul> <li>When you need to access multiple DOM elements or components, use <code>@ViewChildren()</code>.</li> <li>It returns a QueryList, which behaves like an array.</li> </ul> <pre><code>import { Component, ViewChildren, QueryList, ElementRef, AfterViewInit } from '@angular/core';\n\n@Component({\n  selector: 'app-user-list',\n  templateUrl: './user-list.component.html'\n})\nexport class UserListComponent implements AfterViewInit {\n  @ViewChildren('userInput') userInputs!: QueryList&lt;ElementRef&gt;;\n\n  ngAfterViewInit() {\n    this.userInputs.forEach((input, index) =&gt; {\n      console.log(`Input ${index + 1}:`, input.nativeElement);\n    });\n  }\n}\n</code></pre> <pre><code>&lt;!-- user-list.component.html --&gt;\n&lt;input type=\"text\" #userInput placeholder=\"User 1\"&gt;\n&lt;input type=\"text\" #userInput placeholder=\"User 2\"&gt;\n&lt;input type=\"text\" #userInput placeholder=\"User 3\"&gt;\n</code></pre> <p>\ud83d\udc49 <code>@ViewChildren()</code> gives all elements marked with <code>#userInput</code>.</p>"},{"location":"angular/003/#lifecycle-hook-afterviewinit","title":"\ud83d\udd04 Lifecycle Hook: <code>AfterViewInit</code>","text":"<ul> <li><code>@ViewChild()</code> and <code>@ViewChildren()</code> references are only available after the view is initialized.</li> <li>That\u2019s why we use the <code>AfterViewInit</code> lifecycle hook.</li> </ul> <pre><code>import { AfterViewInit } from '@angular/core';\n\nexport class UserComponent implements AfterViewInit {\n  ngAfterViewInit() {\n    console.log('View is ready! You can now access DOM elements.');\n  }\n}\n</code></pre>"},{"location":"angular/003/#real-life-example","title":"\u26a1 Real-life Example","text":"<p>Imagine a bulk attendance form in HRMS:</p> <pre><code>&lt;input type=\"checkbox\" #empCheck&gt; Employee 1\n&lt;input type=\"checkbox\" #empCheck&gt; Employee 2\n&lt;input type=\"checkbox\" #empCheck&gt; Employee 3\n&lt;button (click)=\"getSelected()\"&gt;Submit&lt;/button&gt;\n</code></pre> <pre><code>@ViewChildren('empCheck') empChecks!: QueryList&lt;ElementRef&gt;;\n\ngetSelected() {\n  const selected = this.empChecks\n    .filter(c =&gt; c.nativeElement.checked)\n    .map(c =&gt; c.nativeElement.nextSibling.textContent.trim());\n\n  console.log('Selected Employees:', selected);\n}\n</code></pre> <p>\ud83d\udc49 Allows you to collect all checked employees at once.</p>"},{"location":"angular/003/#best-practices","title":"\ud83d\udea8 Best Practices","text":"<ul> <li>\u2705 Use <code>@ViewChild</code> / <code>@ViewChildren</code> only when necessary.</li> <li>\u2705 Prefer Angular data binding for most cases.</li> <li>\u26a0\ufe0f Direct DOM manipulation (<code>ElementRef.nativeElement</code>) can break Angular\u2019s security (XSS risks).</li> <li>\u2705 Use Angular\u2019s <code>Renderer2</code> service for safe DOM changes.</li> </ul>"},{"location":"angular/004/","title":"Angular Content Projection &amp; Templates (<code>ng-*</code>)","text":""},{"location":"angular/004/#1-ng-content","title":"1. ng-content","text":"<ul> <li>Used to project custom HTML/content from parent into child.</li> <li>Think of it like a placeholder inside the child component.</li> </ul> <pre><code>&lt;!-- child.component.html --&gt;\n&lt;div class=\"card\"&gt;\n  &lt;h3&gt;Child Component&lt;/h3&gt;\n  &lt;ng-content&gt;&lt;/ng-content&gt;\n&lt;/div&gt;\n\n&lt;!-- parent.component.html --&gt;\n&lt;app-child&gt;\n  &lt;p&gt;This paragraph comes from parent!&lt;/p&gt;\n&lt;/app-child&gt;\n</code></pre> <p>\u2705 Output:</p> <pre><code>Child Component\nThis paragraph comes from parent!\n</code></pre>"},{"location":"angular/004/#multiple-slots-with-select","title":"Multiple Slots with <code>select</code>","text":"<pre><code>&lt;!-- child --&gt;\n&lt;div&gt;\n  &lt;header&gt;&lt;ng-content select=\"[header]\"&gt;&lt;/ng-content&gt;&lt;/header&gt;\n  &lt;main&gt;&lt;ng-content&gt;&lt;/ng-content&gt;&lt;/main&gt;\n  &lt;footer&gt;&lt;ng-content select=\"[footer]\"&gt;&lt;/ng-content&gt;&lt;/footer&gt;\n&lt;/div&gt;\n\n&lt;!-- parent --&gt;\n&lt;app-child&gt;\n  &lt;div header&gt;Header Content&lt;/div&gt;\n  &lt;p&gt;Main Content&lt;/p&gt;\n  &lt;div footer&gt;Footer Content&lt;/div&gt;\n&lt;/app-child&gt;\n</code></pre>"},{"location":"angular/004/#2-ng-container","title":"2. ng-container","text":"<ul> <li>A logical wrapper that doesn\u2019t add extra <code>&lt;div&gt;</code> or tag in DOM.</li> <li>Useful for <code>*ngIf</code>, <code>*ngFor</code>, grouping, or conditions.</li> </ul> <pre><code>&lt;ng-container *ngIf=\"isLoggedIn\"&gt;\n  &lt;p&gt;Welcome User!&lt;/p&gt;\n&lt;/ng-container&gt;\n</code></pre> <p>\u2705 No <code>&lt;ng-container&gt;</code> appears in the DOM \u2014 only <code>&lt;p&gt;</code> is rendered.</p> <p>Real-Life Use: Show/hide multiple elements without unwanted <code>&lt;div&gt;</code> wrappers.</p>"},{"location":"angular/004/#3-ng-template","title":"3. ng-template","text":"<ul> <li>Defines a template block that is not rendered until used.</li> <li>Think of it as blueprint HTML.</li> </ul>"},{"location":"angular/004/#example-conditional-rendering","title":"Example: Conditional Rendering","text":"<pre><code>&lt;ng-template #loggedIn&gt;\n  &lt;p&gt;Welcome back!&lt;/p&gt;\n&lt;/ng-template&gt;\n\n&lt;ng-template #loggedOut&gt;\n  &lt;p&gt;Please log in.&lt;/p&gt;\n&lt;/ng-template&gt;\n\n&lt;div *ngIf=\"isLoggedIn; else loggedOut\"&gt;\n  &lt;ng-container *ngTemplateOutlet=\"loggedIn\"&gt;&lt;/ng-container&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"angular/004/#example-custom-loop-rendering","title":"Example: Custom Loop Rendering","text":"<pre><code>&lt;ul&gt;\n  &lt;ng-template ngFor let-item [ngForOf]=\"items\"&gt;\n    &lt;li&gt;{{ item }}&lt;/li&gt;\n  &lt;/ng-template&gt;\n&lt;/ul&gt;\n</code></pre>"},{"location":"angular/004/#4-ngtemplateoutlet","title":"4. ngTemplateOutlet","text":"<ul> <li>Renders an <code>ng-template</code> dynamically.</li> <li>Can also pass context data into the template.</li> </ul>"},{"location":"angular/004/#simple-example","title":"Simple Example","text":"<pre><code>&lt;ng-template #myTemplate&gt;\n  &lt;p&gt;This is from ng-template!&lt;/p&gt;\n&lt;/ng-template&gt;\n\n&lt;ng-container *ngTemplateOutlet=\"myTemplate\"&gt;&lt;/ng-container&gt;\n</code></pre>"},{"location":"angular/004/#with-context-dynamic-data","title":"With Context (Dynamic Data)","text":"<pre><code>&lt;ng-template #userTemplate let-user=\"user\"&gt;\n  &lt;p&gt;User: {{ user.name }} ({{ user.age }} yrs)&lt;/p&gt;\n&lt;/ng-template&gt;\n\n&lt;ng-container *ngTemplateOutlet=\"userTemplate; context: { user: currentUser }\"&gt;\n&lt;/ng-container&gt;\n</code></pre> <pre><code>currentUser = { name: 'Alice', age: 25 };\n</code></pre> <p>\u2705 Output: <code>User: Alice (25 yrs)</code></p>"},{"location":"angular/004/#quick-recap","title":"\ud83d\udccc Quick Recap","text":"Directive Purpose Renders in DOM? Real-Life Use ng-content Projects parent HTML into child Yes Card, Modal with slots ng-container Wrapper with no DOM output No Conditional groups ng-template Hidden blueprint for rendering later No (until used) Alternate states, loops ngTemplateOutlet Dynamically render template Yes Reusable layouts, modals"},{"location":"angular/005/","title":"Lifecycle","text":"<p>Perfect start \ud83d\ude4c You already have the lifecycle hooks in order, but let me polish your notes for clarity, correctness, simple terms, and real-life use cases. I\u2019ll also add a diagram-like flow and example code for reference.</p>"},{"location":"angular/005/#angular-lifecycle-hooks","title":"Angular Lifecycle Hooks","text":"<ul> <li> <p>Lifecycle hooks are special methods in Angular that run at different stages of a component/directive\u2019s life:</p> </li> <li> <p>When it\u2019s created</p> </li> <li>When inputs change</li> <li>When its content or view is initialized/checked</li> <li>When it\u2019s destroyed</li> </ul>"},{"location":"angular/005/#lifecycle-order-from-creation-to-destruction","title":"\ud83d\udccc Lifecycle Order (from creation to destruction)","text":"<ol> <li>ngOnChanges()</li> <li>ngOnInit()</li> <li>ngDoCheck()</li> <li>ngAfterContentInit()</li> <li>ngAfterContentChecked()</li> <li>ngAfterViewInit()</li> <li>ngAfterViewChecked()</li> <li>ngOnDestroy()</li> </ol>"},{"location":"angular/005/#hook-by-hook-explanation","title":"Hook-by-Hook Explanation","text":""},{"location":"angular/005/#1-ngonchanges","title":"1. ngOnChanges()","text":"<ul> <li>Called first when component is created.</li> <li>Also called whenever an @Input() property changes.</li> <li>Runs multiple times (whenever inputs change).</li> </ul> <pre><code>ngOnChanges(changes: SimpleChanges) {\n  console.log('Input property changed:', changes);\n}\n</code></pre> <p>\u2705 Real-Life Use: Refresh data when parent passes new value.</p>"},{"location":"angular/005/#2-ngoninit","title":"2. ngOnInit()","text":"<ul> <li>Called once after the first ngOnChanges().</li> <li>Best place for initialization logic (API calls, default values).</li> </ul> <pre><code>ngOnInit() {\n  console.log('Component initialized!');\n}\n</code></pre> <p>\u2705 Real-Life Use: Fetch user data when profile page loads.</p>"},{"location":"angular/005/#3-ngdocheck","title":"3. ngDoCheck()","text":"<ul> <li>Called after ngOnInit().</li> <li>Runs every time Angular detects any change (property, event, input).</li> <li>Very frequent \u2192 use carefully (performance).</li> </ul> <pre><code>ngDoCheck() {\n  console.log('Change detection running...');\n}\n</code></pre> <p>\u2705 Real-Life Use: Custom change detection (like checking deep object changes).</p>"},{"location":"angular/005/#4-ngaftercontentinit","title":"4. ngAfterContentInit()","text":"<ul> <li>Called once after Angular projects content (<code>&lt;ng-content&gt;</code>) from parent \u2192 child.</li> </ul> <pre><code>ngAfterContentInit() {\n  console.log('Content projected into child!');\n}\n</code></pre> <p>\u2705 Real-Life Use: Setup logic after parent passes dynamic HTML into child.</p>"},{"location":"angular/005/#5-ngaftercontentchecked","title":"5. ngAfterContentChecked()","text":"<ul> <li>Called after <code>ngAfterContentInit()</code> and then after every ngDoCheck().</li> </ul> <pre><code>ngAfterContentChecked() {\n  console.log('Projected content checked for changes');\n}\n</code></pre> <p>\u2705 Real-Life Use: Respond to updates in projected content (like live-updating a slot).</p>"},{"location":"angular/005/#6-ngafterviewinit","title":"6. ngAfterViewInit()","text":"<ul> <li>Called once after component\u2019s own view (and child views) are initialized.</li> </ul> <pre><code>ngAfterViewInit() {\n  console.log('View initialized!');\n}\n</code></pre> <p>\u2705 Real-Life Use: Access child component or DOM element with <code>@ViewChild()</code>.</p>"},{"location":"angular/005/#7-ngafterviewchecked","title":"7. ngAfterViewChecked()","text":"<ul> <li>Called after <code>ngAfterViewInit()</code> and then every time the view is checked for changes.</li> </ul> <pre><code>ngAfterViewChecked() {\n  console.log('View checked for changes');\n}\n</code></pre> <p>\u2705 Real-Life Use: Detect changes in child component rendering.</p>"},{"location":"angular/005/#8-ngondestroy","title":"8. ngOnDestroy()","text":"<ul> <li>Called just before Angular destroys the component.</li> <li>Perfect place for cleanup: unsubscribe, stop timers, detach events.</li> </ul> <pre><code>ngOnDestroy() {\n  console.log('Component destroyed!');\n}\n</code></pre> <p>\u2705 Real-Life Use: Prevent memory leaks by unsubscribing from Observables.</p>"},{"location":"angular/005/#flow-summary","title":"\ud83d\udd04 Flow Summary","text":"<pre><code>[ngOnChanges] \u2192 [ngOnInit] \u2192 [ngDoCheck] \n   \u2192 [ngAfterContentInit] \u2192 [ngAfterContentChecked] \n   \u2192 [ngAfterViewInit] \u2192 [ngAfterViewChecked] \n      \u2192 (repeat DoCheck/AfterContentChecked/AfterViewChecked many times)\n         \u2192 [ngOnDestroy]\n</code></pre>"},{"location":"angular/005/#example-with-all-hooks","title":"\u2705 Example with All Hooks","text":"<pre><code>import { Component, OnInit, OnChanges, DoCheck,\n         AfterContentInit, AfterContentChecked,\n         AfterViewInit, AfterViewChecked, OnDestroy,\n         SimpleChanges } from '@angular/core';\n\n@Component({\n  selector: 'app-lifecycle',\n  template: `&lt;p&gt;Lifecycle demo&lt;/p&gt;`\n})\nexport class LifecycleComponent implements\n  OnChanges, OnInit, DoCheck,\n  AfterContentInit, AfterContentChecked,\n  AfterViewInit, AfterViewChecked, OnDestroy {\n\n  ngOnChanges(changes: SimpleChanges) {\n    console.log('ngOnChanges', changes);\n  }\n\n  ngOnInit() {\n    console.log('ngOnInit');\n  }\n\n  ngDoCheck() {\n    console.log('ngDoCheck');\n  }\n\n  ngAfterContentInit() {\n    console.log('ngAfterContentInit');\n  }\n\n  ngAfterContentChecked() {\n    console.log('ngAfterContentChecked');\n  }\n\n  ngAfterViewInit() {\n    console.log('ngAfterViewInit');\n  }\n\n  ngAfterViewChecked() {\n    console.log('ngAfterViewChecked');\n  }\n\n  ngOnDestroy() {\n    console.log('ngOnDestroy');\n  }\n}\n</code></pre>"},{"location":"angular/005/#angular-lifecycle-hooks-quick-reference","title":"\ud83d\udccc Angular Lifecycle Hooks \u2013 Quick Reference","text":"Hook When It Runs How Many Times Real-Life Use ngOnChanges(changes: SimpleChanges) On component creation + whenever an <code>@Input()</code> value changes Many times (every input change) React to parent input updates (e.g., refresh data when filter changes) ngOnInit() After first <code>ngOnChanges()</code> (component initialized) Once Fetch data from API, set default values ngDoCheck() After <code>ngOnInit()</code>, then on every change detection cycle Many times Custom change detection (deep object comparison) ngAfterContentInit() After content (<code>&lt;ng-content&gt;</code>) projected from parent \u2192 child Once Setup logic after slot content inserted ngAfterContentChecked() After <code>ngAfterContentInit()</code>, then after every <code>ngDoCheck()</code> Many times Track changes in projected content ngAfterViewInit() After component\u2019s view + child views are initialized Once Access DOM elements or child components with <code>@ViewChild()</code> ngAfterViewChecked() After <code>ngAfterViewInit()</code>, then after every view check Many times Detect view updates, trigger animations ngOnDestroy() Just before Angular destroys the component Once Cleanup \u2192 unsubscribe from Observables, clear timers, detach event listeners"},{"location":"angular/005/#flow-order-one-cycle","title":"\ud83d\udccc Flow Order (One Cycle)","text":"<pre><code>ngOnChanges \u2192 ngOnInit \u2192 ngDoCheck \n   \u2192 ngAfterContentInit \u2192 ngAfterContentChecked \n   \u2192 ngAfterViewInit \u2192 ngAfterViewChecked \n      (repeat DoCheck + AfterContentChecked + AfterViewChecked many times)\n         \u2192 ngOnDestroy\n</code></pre>"},{"location":"angular/006/","title":"Directives","text":"<p>Nice \ud83d\udc4d You\u2019ve already covered the basics of directives. Let me clean it up, expand with clear explanations, proper examples, real-life uses, and best practices. This way, your directive notes will be complete and ready for reference.</p>"},{"location":"angular/006/#directives-in-angular","title":"Directives in Angular","text":"<ul> <li>Directives are special classes in Angular that let you add behavior or manipulate the DOM structure.</li> <li>They are like \u201cinstructions\u201d attached to HTML elements.</li> </ul> <p>\ud83d\udc49 Types of Directives:</p> <ol> <li>Attribute Directives \u2013 change the appearance or behavior of an element.</li> <li>Structural Directives \u2013 change the DOM layout/structure (add/remove elements).</li> </ol>"},{"location":"angular/006/#1-attribute-directives","title":"1. Attribute Directives","text":"<p>Used to change styles, properties, or behavior of elements. Examples: <code>ngStyle</code>, <code>ngClass</code>, custom highlight directive.</p>"},{"location":"angular/006/#example-custom-highlight-directive","title":"Example: Custom Highlight Directive","text":"<pre><code>import { Directive, ElementRef, Renderer2, OnInit } from '@angular/core';\n\n@Directive({\n  selector: '[appHighlight]'\n})\nexport class HighlightDirective implements OnInit {\n\n  constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n  ngOnInit() {\n    // apply yellow background\n    this.renderer.setStyle(this.el.nativeElement, 'backgroundColor', 'yellow');\n  }\n}\n</code></pre> <pre><code>&lt;!-- Usage --&gt;\n&lt;p appHighlight&gt;This text has a yellow background!&lt;/p&gt;\n</code></pre> <p>\u2705 Real-Life Use: Highlight invalid form fields, apply hover effects, or dynamically change element styles.</p>"},{"location":"angular/006/#passing-data-to-directive-input","title":"Passing Data to Directive (<code>@Input</code>)","text":"<pre><code>import { Directive, ElementRef, Renderer2, Input, OnInit } from '@angular/core';\n\n@Directive({\n  selector: '[appHighlight]'\n})\nexport class HighlightDirective implements OnInit {\n\n  @Input() defaultColor: string = 'lightblue';\n\n  constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n  ngOnInit() {\n    this.renderer.setStyle(this.el.nativeElement, 'backgroundColor', this.defaultColor);\n  }\n}\n</code></pre> <pre><code>&lt;!-- Usage --&gt;\n&lt;div appHighlight [defaultColor]=\"'pink'\"&gt;This text has pink background!&lt;/div&gt;\n&lt;div appHighlight&gt;This text has lightblue background!&lt;/div&gt;\n</code></pre> <p>\u2705 Real-Life Use: Pass custom styles/colors to elements without hardcoding inside directive.</p>"},{"location":"angular/006/#2-structural-directives","title":"2. Structural Directives","text":"<ul> <li>Structural directives change the DOM structure by adding/removing elements.</li> <li>They always have a <code>*</code> prefix in templates.</li> <li>Examples: <code>*ngIf</code>, <code>*ngFor</code>, <code>*ngSwitch</code>.</li> </ul>"},{"location":"angular/006/#example-ngif","title":"Example: <code>*ngIf</code>","text":"<pre><code>&lt;p *ngIf=\"isLoggedIn\"&gt;Welcome back!&lt;/p&gt;\n</code></pre> <p>\ud83d\udd0e Behind the scenes Angular transforms it into:</p> <pre><code>&lt;ng-template [ngIf]=\"isLoggedIn\"&gt;\n  &lt;p&gt;Welcome back!&lt;/p&gt;\n&lt;/ng-template&gt;\n</code></pre>"},{"location":"angular/006/#example-ngfor","title":"Example: <code>*ngFor</code>","text":"<pre><code>&lt;ul&gt;\n  &lt;li *ngFor=\"let item of items\"&gt;{{ item }}&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <p>\ud83d\udd0e Behind the scenes:</p> <pre><code>&lt;ng-template ngFor let-item [ngForOf]=\"items\"&gt;\n  &lt;li&gt;{{ item }}&lt;/li&gt;\n&lt;/ng-template&gt;\n</code></pre>"},{"location":"angular/006/#summary","title":"\u2705 Summary","text":"Type Examples Purpose Real-Life Use Attribute Directive <code>ngStyle</code>, <code>ngClass</code>, custom highlight Modify element appearance/behavior Highlight errors, apply themes, animations Structural Directive <code>*ngIf</code>, <code>*ngFor</code>, <code>*ngSwitch</code> Modify DOM structure (add/remove elements) Conditional rendering, list rendering"},{"location":"angular/007/","title":"Interceptor","text":""},{"location":"angular/007/#angular-interceptor","title":"\ud83c\udf10 Angular Interceptor","text":""},{"location":"angular/007/#definition","title":"\ud83d\udd39 Definition","text":"<p>An Interceptor in Angular is like a middleware for HTTP requests and responses. It sits between your app and the server and lets you modify, monitor, or handle errors before the request goes out or after the response comes back.</p>"},{"location":"angular/007/#key-points","title":"\ud83d\udd39 Key Points","text":"<ul> <li>Interceptors work with Angular\u2019s HttpClient.</li> <li>Can modify request (e.g., add <code>Authorization</code> header).</li> <li>Can modify response (e.g., format data before passing to component).</li> <li>Can handle errors globally (e.g., expired session \u2192 redirect).</li> <li>Can log, retry, or show loading indicators.</li> <li>Multiple interceptors can be chained \u2192 executed in the order they are provided.</li> </ul>"},{"location":"angular/007/#request-response-flow","title":"\ud83d\udd39 Request &amp; Response Flow","text":"<pre><code>Component \u2192 Http Request \u2192 Interceptor(s) \u2192 Server\nServer \u2192 Response \u2192 Interceptor(s) \u2192 Component\n</code></pre>"},{"location":"angular/007/#example-simple-auth-interceptor","title":"\ud83d\udd39 Example: Simple Auth Interceptor","text":"<pre><code>import { Injectable } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  intercept(req: HttpRequest&lt;any&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;any&gt;&gt; {\n    // Example: add token\n    const token = localStorage.getItem('authToken');\n\n    let modifiedReq = req;\n    if (token) {\n      modifiedReq = req.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n\n    console.log('Outgoing Request:', modifiedReq);\n\n    return next.handle(modifiedReq);\n  }\n}\n</code></pre> <p>\ud83d\udccc What happens here?</p> <ol> <li>Component sends request (e.g., <code>getUserProfile()</code>).</li> <li>Interceptor catches it.</li> <li>Adds <code>Authorization</code> header with token.</li> <li>Sends modified request to server.</li> <li>When response comes back \u2192 Interceptor can log/modify it before component sees it.</li> </ol>"},{"location":"angular/007/#example-modify-response","title":"\ud83d\udd39 Example: Modify Response","text":"<pre><code>import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpResponse } from '@angular/common/http';\nimport { Observable, map } from 'rxjs';\n\n@Injectable()\nexport class ResponseInterceptor implements HttpInterceptor {\n  intercept(req: HttpRequest&lt;any&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;any&gt;&gt; {\n    return next.handle(req).pipe(\n      map(event =&gt; {\n        if (event instanceof HttpResponse) {\n          console.log('Incoming Response:', event.body);\n          // Example: unwrap API data { data: {...} } \u2192 return only {...}\n          if (event.body &amp;&amp; event.body.data) {\n            return event.clone({ body: event.body.data });\n          }\n        }\n        return event;\n      })\n    );\n  }\n}\n</code></pre>"},{"location":"angular/007/#visual-diagram","title":"\ud83d\udd39 Visual Diagram","text":"<pre><code>                [ Angular Component ]\n                         |\n                         v\n        -----------------------------------\n        |          Request Phase          |\n        -----------------------------------\n            1. Component makes request\n            2. Interceptor modifies request (e.g., add token)\n            3. Modified request sent to server\n                         |\n                         v\n                    [ Server API ]\n                         |\n                         v\n        -----------------------------------\n        |         Response Phase          |\n        -----------------------------------\n            4. Server sends response\n            5. Interceptor can modify response (unwrap, log, handle error)\n            6. Component receives final response\n</code></pre>"},{"location":"angular/007/#quick-summary","title":"\u2705 Quick Summary","text":"<ul> <li>Definition: Middleware for HTTP in Angular.</li> <li>Request: Modify \u2192 Add headers, tokens, log.</li> <li>Response: Modify \u2192 Transform data, handle errors, retry.</li> <li>Use cases: Auth tokens (like Gmail), loading spinners, error handling, data formatting.</li> </ul>"},{"location":"angular/008/","title":"\ud83d\udcdd Angular Forms","text":"<p>Forms are used to collect, validate, and submit user input in Angular applications. There are two main approaches:</p> <ol> <li>Template-driven forms \u2192 Easier, more HTML-driven.</li> <li>Reactive forms \u2192 More powerful, flexible, TypeScript-driven.</li> </ol>"},{"location":"angular/008/#template-driven-forms","title":"\ud83d\udd39 Template-driven Forms","text":"<p>\ud83d\udccc Definition: Template-driven forms are forms built using Angular directives inside the HTML template. Angular automatically manages form state and validation.</p> <p>\ud83d\udccc Key Points:</p> <ul> <li>Easy to use, suitable for simple forms.</li> <li>Use <code>ngModel</code>, <code>ngForm</code>, and validation attributes (<code>required</code>, <code>minlength</code>, etc.).</li> <li>Angular automatically creates <code>FormControl</code> and <code>FormGroup</code> in the background.</li> <li>Less TypeScript code, more HTML-driven.</li> <li>Harder to scale for complex forms.</li> <li>Uses Angular directives in the HTML template (<code>ngModel</code>, <code>ngForm</code>).</li> <li>Minimal TypeScript code \u2192 logic is mostly in the template.</li> </ul>"},{"location":"angular/008/#example-login-form-template-driven","title":"\u2705 Example: Login Form (Template-driven)","text":"<pre><code>&lt;!-- login.component.html --&gt;\n&lt;form #loginForm=\"ngForm\" (ngSubmit)=\"onSubmit(loginForm)\"&gt;\n  &lt;label&gt;Email:&lt;/label&gt;\n  &lt;input type=\"email\" name=\"email\" ngModel required /&gt;\n\n  &lt;label&gt;Password:&lt;/label&gt;\n  &lt;input type=\"password\" name=\"password\" ngModel required minlength=\"6\" /&gt;\n\n  &lt;button type=\"submit\" [disabled]=\"loginForm.invalid\"&gt;Login&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <pre><code>// login.component.ts\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html'\n})\nexport class LoginComponent {\n  onSubmit(form: any) {\n    console.log('Form Value:', form.value);\n  }\n}\n</code></pre> <p>\ud83d\udccc Key Features:</p> <ul> <li>Uses <code>ngModel</code> for two-way data binding.</li> <li>Form validation is declarative (done in HTML).</li> <li>Simpler but less control over dynamic/complex forms.</li> </ul>"},{"location":"angular/008/#reactive-forms","title":"\ud83d\udd39 Reactive Forms","text":"<p>\ud83d\udccc Definition: Reactive forms are forms built and managed in TypeScript using <code>FormControl</code>, <code>FormGroup</code>, and <code>FormBuilder</code>. The template just binds to the code-defined structure.</p> <p>\ud83d\udccc Key Points:</p> <ul> <li>Explicitly define structure in TypeScript (<code>FormGroup</code>, <code>FormControl</code>).</li> <li>Validation rules are written in the component class.</li> <li>Easier to test, maintain, and scale.</li> <li>Used in large apps like Gmail (compose mail), Jira (create issue).</li> <li>Suitable for complex, dynamic forms (e.g., sign-up, settings, Jira/Gmail-like form editors).</li> <li>Uses <code>FormGroup</code>, <code>FormControl</code>, <code>FormBuilder</code> in TypeScript.</li> <li>Validation logic is handled in the component class.</li> <li>Better for large apps, custom validators, dynamic inputs.</li> </ul>"},{"location":"angular/008/#example-registration-form-reactive","title":"\u2705 Example: Registration Form (Reactive)","text":"<pre><code>// register.component.ts\nimport { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html'\n})\nexport class RegisterComponent {\n  registerForm: FormGroup;\n\n  constructor(private fb: FormBuilder) {\n    this.registerForm = this.fb.group({\n      username: ['', [Validators.required, Validators.minLength(3)]],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n\n  onSubmit() {\n    console.log('Form Value:', this.registerForm.value);\n  }\n}\n</code></pre> <pre><code>&lt;!-- register.component.html --&gt;\n&lt;form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\"&gt;\n  &lt;label&gt;Username:&lt;/label&gt;\n  &lt;input formControlName=\"username\" /&gt;\n  &lt;div *ngIf=\"registerForm.get('username')?.invalid &amp;&amp; registerForm.get('username')?.touched\"&gt;\n    Username is required (min 3 chars).\n  &lt;/div&gt;\n\n  &lt;label&gt;Email:&lt;/label&gt;\n  &lt;input formControlName=\"email\" /&gt;\n  &lt;div *ngIf=\"registerForm.get('email')?.errors?.['email']\"&gt;\n    Invalid email format.\n  &lt;/div&gt;\n\n  &lt;label&gt;Password:&lt;/label&gt;\n  &lt;input type=\"password\" formControlName=\"password\" /&gt;\n\n  &lt;button type=\"submit\" [disabled]=\"registerForm.invalid\"&gt;Register&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <p>\ud83d\udccc Key Features:</p> <ul> <li>Uses <code>FormGroup</code> &amp; <code>FormControl</code> to manage state.</li> <li>More predictable &amp; scalable.</li> <li>Validations are in TypeScript, easier for complex logic.</li> <li>Easier to test.</li> </ul>"},{"location":"angular/008/#visual-diagram","title":"\ud83d\udd39 Visual Diagram","text":"<pre><code>Template-driven Forms\n---------------------\n[HTML Template]\n   \u2193 (ngModel, ngForm)\nAngular automatically creates FormControl &amp; validation\n   \u2193\n[Component receives form data on submit]\n\nReactive Forms\n--------------\n[Component Class]\n   \u2193 (FormGroup, FormControl, Validators)\nExplicitly defines form structure &amp; rules\n   \u2193\n[HTML Template binds using formGroup &amp; formControlName]\n</code></pre>"},{"location":"angular/008/#real-life-use-cases","title":"\ud83d\udd39 Real-life Use Cases","text":"<ul> <li> <p>Template-driven:</p> </li> <li> <p>Gmail \u2192 Login form (email + password).</p> </li> <li> <p>Contact us form in a static website.</p> </li> <li> <p>Reactive:</p> </li> <li> <p>Jira \u2192 Create Issue form (dynamic fields, validations).</p> </li> <li>Gmail \u2192 Compose email (to, cc, bcc, attachments, validation).</li> <li>E-commerce checkout (dynamic address, payment, shipping).</li> </ul>"},{"location":"angular/008/#quick-comparison","title":"\u2705 Quick Comparison","text":"Feature Template-driven Reactive Code location Mostly HTML Mostly TypeScript Suitable for Simple forms Complex forms Validation Template-based Class-based Scalability Low High Testing Harder Easier Example use case Login form Jira issue creation"},{"location":"angular/008/#quick-comparison_1","title":"\ud83d\udd39 Quick Comparison","text":"Feature Template-driven Reactive Definition Forms managed by Angular automatically in HTML Forms fully controlled by developer in TypeScript Code location Mostly in HTML Mostly in TypeScript Validation Template-based (<code>required</code>, <code>ngModel</code>) Class-based (<code>Validators.required</code>) Best for Simple forms (login, contact) Complex forms (Jira issue, Gmail compose) Scalability Low High Testing Harder Easier"},{"location":"angular/008/#formcontrol-formgroup-formarray","title":"\ud83c\udfd7\ufe0f FormControl, FormGroup, FormArray","text":""},{"location":"angular/008/#simple-definition","title":"\ud83d\udd39 Simple Definition","text":"<ul> <li>FormControl \u2192 Represents a single input field (like email, password).</li> <li>FormGroup \u2192 Groups multiple <code>FormControl</code>s together (like a login form).</li> <li>FormArray \u2192 Manages an array of FormControl/FormGroup (like multiple phone numbers or tasks).</li> </ul>"},{"location":"angular/008/#formcontrol","title":"\ud83d\udd39 FormControl","text":"<p>\ud83d\udccc Definition: Represents a single form input with its value and validation state.</p> <p>\ud83d\udccc Points:</p> <ul> <li>Tracks value and validation of one input field.</li> <li>Created with <code>new FormControl()</code> or via <code>FormBuilder</code>.</li> <li>Useful for individual inputs (email, password, etc.).</li> </ul>"},{"location":"angular/008/#example","title":"\u2705 Example","text":"<pre><code>import { Component } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-single-control',\n  template: `\n    &lt;input [formControl]=\"emailControl\" placeholder=\"Enter email\"&gt;\n    &lt;p *ngIf=\"emailControl.invalid &amp;&amp; emailControl.touched\"&gt;Invalid Email&lt;/p&gt;\n  `\n})\nexport class SingleControlComponent {\n  emailControl = new FormControl('', [Validators.required, Validators.email]);\n}\n</code></pre>"},{"location":"angular/008/#formgroup","title":"\ud83d\udd39 FormGroup","text":"<p>\ud83d\udccc Definition: A <code>FormGroup</code> is a collection of FormControls treated as one unit.</p> <p>\ud83d\udccc Points:</p> <ul> <li>Represents a form with multiple fields.</li> <li>Each control inside can be validated individually.</li> <li>Helps manage the overall validity of the group.</li> </ul>"},{"location":"angular/008/#example_1","title":"\u2705 Example","text":"<pre><code>import { Component } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-login',\n  template: `\n    &lt;form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\"&gt;\n      &lt;input formControlName=\"email\" placeholder=\"Email\"&gt;\n      &lt;input type=\"password\" formControlName=\"password\" placeholder=\"Password\"&gt;\n      &lt;button type=\"submit\" [disabled]=\"loginForm.invalid\"&gt;Login&lt;/button&gt;\n    &lt;/form&gt;\n  `\n})\nexport class LoginComponent {\n  loginForm = new FormGroup({\n    email: new FormControl('', [Validators.required, Validators.email]),\n    password: new FormControl('', Validators.required)\n  });\n\n  onSubmit() {\n    console.log(this.loginForm.value);\n  }\n}\n</code></pre>"},{"location":"angular/008/#formarray","title":"\ud83d\udd39 FormArray","text":"<p>\ud83d\udccc Definition: A <code>FormArray</code> is a dynamic collection of FormControls or FormGroups, useful when the number of inputs is not fixed.</p> <p>\ud83d\udccc Points:</p> <ul> <li>Used for dynamic forms (like multiple phone numbers, tasks, tags).</li> <li>Can push or remove controls at runtime.</li> <li>Works well with <code>FormBuilder.array()</code>.</li> </ul>"},{"location":"angular/008/#example-dynamic-phone-numbers","title":"\u2705 Example: Dynamic Phone Numbers","text":"<pre><code>import { Component } from '@angular/core';\nimport { FormArray, FormBuilder, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-phones',\n  template: `\n    &lt;form [formGroup]=\"userForm\"&gt;\n      &lt;div formArrayName=\"phones\"&gt;\n        &lt;div *ngFor=\"let phone of phones.controls; let i = index\"&gt;\n          &lt;input [formControlName]=\"i\" placeholder=\"Enter phone number\"&gt;\n          &lt;button type=\"button\" (click)=\"removePhone(i)\"&gt;Remove&lt;/button&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;button type=\"button\" (click)=\"addPhone()\"&gt;Add Phone&lt;/button&gt;\n      &lt;button type=\"submit\"&gt;Save&lt;/button&gt;\n    &lt;/form&gt;\n  `\n})\nexport class PhonesComponent {\n  userForm = this.fb.group({\n    phones: this.fb.array([\n      this.fb.control('', Validators.required)\n    ])\n  });\n\n  constructor(private fb: FormBuilder) {}\n\n  get phones() {\n    return this.userForm.get('phones') as FormArray;\n  }\n\n  addPhone() {\n    this.phones.push(this.fb.control('', Validators.required));\n  }\n\n  removePhone(i: number) {\n    this.phones.removeAt(i);\n  }\n}\n</code></pre>"},{"location":"angular/008/#diagram","title":"\ud83d\udd39 Diagram","text":"<pre><code>FormGroup\n \u251c\u2500\u2500 FormControl (email)\n \u251c\u2500\u2500 FormControl (password)\n \u2514\u2500\u2500 FormArray (phones)\n        \u251c\u2500\u2500 FormControl (phone 1)\n        \u251c\u2500\u2500 FormControl (phone 2)\n        \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"angular/008/#comparison","title":"\ud83d\udd39 Comparison","text":"Feature FormControl FormGroup FormArray Definition Single input field Group of multiple inputs Dynamic list of inputs Best for Email, password, single text field Login form, registration form Phone numbers, tasks, tags Fixed/Dynamic Fixed Fixed set of fields Dynamic (add/remove at runtime) Validation On single control On each field &amp; whole group On each control inside array"},{"location":"angular/009/","title":"\ud83c\udf10 Angular Routing","text":""},{"location":"angular/009/#simple-definition","title":"\ud83d\udd39 Simple Definition","text":"<p>Angular Routing allows you to navigate between different views/components in a single-page application (SPA) without reloading the page. It maps URL paths to specific components, enabling a dynamic and smooth user experience.</p>"},{"location":"angular/009/#key-points","title":"\ud83d\udd39 Key Points","text":"<ul> <li>Angular uses RouterModule to configure routes.</li> <li>Each route has a path and a component.</li> <li>Supports nested/child routes for complex layouts.</li> <li>Can pass route parameters for dynamic pages (<code>/user/:id</code>).</li> <li>Supports lazy loading for better performance.</li> <li>Provides guards (<code>CanActivate</code>, <code>CanDeactivate</code>) to control access.</li> <li>Supports redirects and wildcard routes for 404 pages.</li> </ul>"},{"location":"angular/009/#basic-routing-example","title":"\ud83d\udd39 Basic Routing Example","text":""},{"location":"angular/009/#1-configure-routes-app-routingmodulets","title":"1. Configure Routes (<code>app-routing.module.ts</code>)","text":"<pre><code>import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\nimport { AboutComponent } from './about/about.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\n\nconst routes: Routes = [\n  { path: '', component: HomeComponent }, // default route\n  { path: 'about', component: AboutComponent },\n  { path: '**', component: PageNotFoundComponent } // wildcard 404\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n</code></pre>"},{"location":"angular/009/#2-add-router-outlet-appcomponenthtml","title":"2. Add Router Outlet (<code>app.component.html</code>)","text":"<pre><code>&lt;nav&gt;\n  &lt;a routerLink=\"\"&gt;Home&lt;/a&gt;\n  &lt;a routerLink=\"about\"&gt;About&lt;/a&gt;\n&lt;/nav&gt;\n\n&lt;router-outlet&gt;&lt;/router-outlet&gt; &lt;!-- dynamic view rendered here --&gt;\n</code></pre>"},{"location":"angular/009/#route-parameters","title":"\ud83d\udd39 Route Parameters","text":"<ul> <li>Dynamic URLs, e.g., <code>/user/123</code>.</li> </ul> <pre><code>const routes: Routes = [\n  { path: 'user/:id', component: UserComponent }\n];\n</code></pre> <pre><code>// user.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-user',\n  template: `&lt;p&gt;User ID: {{ userId }}&lt;/p&gt;`\n})\nexport class UserComponent implements OnInit {\n  userId!: string;\n  constructor(private route: ActivatedRoute) {}\n  ngOnInit() {\n    this.userId = this.route.snapshot.paramMap.get('id')!;\n  }\n}\n</code></pre>"},{"location":"angular/009/#childnested-routes","title":"\ud83d\udd39 Child/Nested Routes","text":"<pre><code>const routes: Routes = [\n  {\n    path: 'dashboard',\n    component: DashboardComponent,\n    children: [\n      { path: 'stats', component: StatsComponent },\n      { path: 'reports', component: ReportsComponent }\n    ]\n  }\n];\n</code></pre> <pre><code>&lt;!-- dashboard.component.html --&gt;\n&lt;h2&gt;Dashboard&lt;/h2&gt;\n&lt;nav&gt;\n  &lt;a routerLink=\"stats\"&gt;Stats&lt;/a&gt;\n  &lt;a routerLink=\"reports\"&gt;Reports&lt;/a&gt;\n&lt;/nav&gt;\n&lt;router-outlet&gt;&lt;/router-outlet&gt;\n</code></pre>"},{"location":"angular/009/#lazy-loading","title":"\ud83d\udd39 Lazy Loading","text":"<pre><code>const routes: Routes = [\n  { path: 'admin', loadChildren: () =&gt; import('./admin/admin.module').then(m =&gt; m.AdminModule) }\n];\n</code></pre> <ul> <li>Why? Load modules only when needed \u2192 faster initial load.</li> </ul>"},{"location":"angular/009/#route-guards","title":"\ud83d\udd39 Route Guards","text":"<ul> <li>Control access to routes: <code>CanActivate</code>, <code>CanDeactivate</code>.</li> <li>Example: Only logged-in users can access <code>/dashboard</code>.</li> </ul> <pre><code>@Injectable({ providedIn: 'root' })\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n  canActivate(): boolean {\n    if (this.authService.isLoggedIn()) return true;\n    this.router.navigate(['/login']);\n    return false;\n  }\n}\n</code></pre> <pre><code>{ path: 'dashboard', component: DashboardComponent, canActivate: [AuthGuard] }\n</code></pre>"},{"location":"angular/009/#visual-diagram","title":"\ud83d\udd39 Visual Diagram","text":"<pre><code>URL: /dashboard/stats\n-------------------------\nRouterModule\n   |\n   v\nRoute Match -&gt; dashboard\n   |\n   v\nRender DashboardComponent\n   |\n   v\nChild Route Match -&gt; stats\n   |\n   v\nRender StatsComponent in &lt;router-outlet&gt;\n</code></pre>"},{"location":"angular/009/#comparison-optional","title":"\ud83d\udd39 Comparison (Optional)","text":"Feature Description RouterModule Core module for routing routerLink Directive for navigation router-outlet Placeholder for dynamic component Route parameters Dynamic URLs (<code>/user/:id</code>) Child routes Nested views in parent layout Lazy loading Load modules only when needed Guards Protect routes (<code>CanActivate</code>, <code>CanDeactivate</code>) <p>\u2705 Routing in Real Apps:</p> <ul> <li>Gmail \u2192 <code>/inbox</code>, <code>/sent</code>, <code>/drafts/:id</code></li> <li>Jira \u2192 <code>/projects</code>, <code>/projects/:id/issues</code></li> <li>E-commerce \u2192 <code>/products/:id</code>, <code>/cart</code>, <code>/checkout</code></li> </ul> <p>Perfect \ud83d\udc4d Let\u2019s create a complete Angular Routing Strategy section following your format:</p> <p>\u2705 Simple definition \u2705 Points for each \u2705 Code examples + diagrams \u2705 Comparison (if applicable)</p>"},{"location":"angular/009/#angular-routing-strategy","title":"\ud83c\udf10 Angular Routing Strategy","text":""},{"location":"angular/009/#simple-definition_1","title":"\ud83d\udd39 Simple Definition","text":"<p>Routing strategies in Angular define how the URLs are managed in the browser. They determine whether the URL uses hash (#) or HTML5 pushState and how navigation works in single-page applications (SPA).</p>"},{"location":"angular/009/#key-points_1","title":"\ud83d\udd39 Key Points","text":"<ol> <li> <p>Angular supports two routing strategies:</p> </li> <li> <p>PathLocationStrategy (Default, HTML5)</p> </li> <li> <p>HashLocationStrategy (# based URL)</p> </li> <li> <p>PathLocationStrategy</p> </li> <li> <p>Uses normal URLs like <code>/home</code>, <code>/about</code>.</p> </li> <li>Requires server configuration to redirect all requests to <code>index.html</code>.</li> <li> <p>Clean URLs \u2192 better SEO.</p> </li> <li> <p>HashLocationStrategy</p> </li> <li> <p>Uses URLs with hash like <code>/#/home</code>, <code>/#/about</code>.</p> </li> <li>Works without server configuration.</li> <li> <p>Old style \u2192 hash is ignored by the server.</p> </li> <li> <p>You can configure the strategy using <code>providers</code> in <code>AppModule</code>.</p> </li> </ol>"},{"location":"angular/009/#code-examples","title":"\ud83d\udd39 Code Examples","text":""},{"location":"angular/009/#1-pathlocationstrategy-default","title":"1. PathLocationStrategy (Default)","text":"<pre><code>import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\nimport { AboutComponent } from './about/about.component';\n\nconst routes: Routes = [\n  { path: '', component: HomeComponent },\n  { path: 'about', component: AboutComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n</code></pre> <ul> <li>URL: <code>http://example.com/about</code></li> <li>Requires server to redirect unknown URLs to <code>index.html</code>.</li> </ul>"},{"location":"angular/009/#2-hashlocationstrategy","title":"2. HashLocationStrategy","text":"<pre><code>import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { RouterModule, Routes, HashLocationStrategy, LocationStrategy } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\nimport { AboutComponent } from './about/about.component';\n\nconst routes: Routes = [\n  { path: '', component: HomeComponent },\n  { path: 'about', component: AboutComponent }\n];\n\n@NgModule({\n  imports: [BrowserModule, RouterModule.forRoot(routes)],\n  providers: [{ provide: LocationStrategy, useClass: HashLocationStrategy }],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n</code></pre> <ul> <li>URL: <code>http://example.com/#/about</code></li> <li>Works without server setup.</li> </ul>"},{"location":"angular/009/#diagram","title":"\ud83d\udd39 Diagram","text":"<pre><code>PathLocationStrategy (HTML5)\n--------------------------------\nUser navigates -&gt; /about\nRouter -&gt; Matches AboutComponent\nBrowser URL shows /about\nServer must redirect unknown paths to index.html\n\nHashLocationStrategy\n--------------------------------\nUser navigates -&gt; /#/about\nRouter -&gt; Matches AboutComponent\nBrowser URL shows /#/about\nServer ignores everything after #\n</code></pre>"},{"location":"angular/009/#comparison","title":"\ud83d\udd39 Comparison","text":"Feature PathLocationStrategy HashLocationStrategy URL style /home, /about /#/home, /#/about SEO friendly \u2705 Yes \u274c No Server config required \u2705 Yes \u274c No Works on old browsers \u2705 Modern \u2705 All Clean URL \u2705 Yes \u274c No <p>\u2705 Real-life Use Cases:</p> <ul> <li>Gmail \u2192 Uses PathLocationStrategy (clean URLs like <code>/inbox</code>).</li> <li>Legacy SPAs / older apps \u2192 Sometimes use HashLocationStrategy to avoid server config.</li> </ul> <p>Absolutely \u2705 Let\u2019s break it down clearly for Production deployment with effects, pros/cons, and recommendation.</p>"},{"location":"angular/009/#angular-routing-strategies-in-production","title":"\ud83c\udf10 Angular Routing Strategies in Production","text":"<p>When you deploy an Angular SPA to a production server, the routing strategy you choose affects how URLs are interpreted by the browser and the server.</p>"},{"location":"angular/009/#1-pathlocationstrategy-default_1","title":"1\ufe0f\u20e3 PathLocationStrategy (Default)","text":"<ul> <li> <p>URL format: <code>/home</code>, <code>/about</code>, <code>/dashboard</code></p> </li> <li> <p>Effect on Production Server:</p> </li> <li> <p>The server receives requests for <code>/about</code> directly.</p> </li> <li>If the server is not configured to redirect unknown routes to <code>index.html</code>, it will return 404 Not Found.</li> <li> <p>Requires server setup (Apache, Nginx, Express) to redirect all unmatched URLs to <code>index.html</code>, so Angular can handle routing.</p> </li> <li> <p>Pros:</p> </li> <li> <p>Clean, SEO-friendly URLs.</p> </li> <li> <p>Works like a traditional multi-page website for the user.</p> </li> <li> <p>Cons:</p> </li> <li> <p>Requires server configuration.</p> </li> <li> <p>If misconfigured, users navigating directly to a URL get 404 errors.</p> </li> <li> <p>Use case:</p> </li> <li> <p>Recommended for modern SPAs deployed on servers where you can configure redirects.</p> </li> <li>Example: Gmail, Jira, Angular enterprise apps.</li> </ul>"},{"location":"angular/009/#2-hashlocationstrategy_1","title":"2\ufe0f\u20e3 HashLocationStrategy","text":"<ul> <li> <p>URL format: <code>/#/home</code>, <code>/#/about</code>, <code>/#/dashboard</code></p> </li> <li> <p>Effect on Production Server:</p> </li> <li> <p>Everything after <code>#</code> is ignored by the server.</p> </li> <li>No server configuration is required.</li> <li> <p>The browser handles everything after the hash and Angular processes routing.</p> </li> <li> <p>Pros:</p> </li> <li> <p>No server configuration needed \u2192 works on static file servers like GitHub Pages.</p> </li> <li> <p>Safe for legacy servers or simple hosting.</p> </li> <li> <p>Cons:</p> </li> <li> <p>URLs are less clean (contains <code>#</code>).</p> </li> <li> <p>Not SEO-friendly, search engines may ignore content after <code>#</code>.</p> </li> <li> <p>Use case:</p> </li> <li> <p>Recommended for static hosting, demo apps, or environments where server setup is restricted.</p> </li> </ul>"},{"location":"angular/009/#3-which-one-to-use-and-why","title":"3\ufe0f\u20e3 Which one to use and why","text":"Strategy Recommendation for Production Reason PathLocationStrategy \u2705 Preferred for modern SPAs Clean URLs, SEO-friendly, looks like traditional website URLs HashLocationStrategy \u26a0\ufe0f Only if server configuration is not possible Works on static/legacy servers, but URLs are less user-friendly &amp; SEO-poor"},{"location":"angular/009/#summary","title":"\ud83d\udd39 Summary","text":"<ul> <li>Use PathLocationStrategy whenever possible \u2192 better UX and SEO.</li> <li>Ensure the server is configured to redirect all requests to <code>index.html</code> (Angular handles the route).</li> <li>Use HashLocationStrategy only if you cannot configure the server (like GitHub Pages).</li> </ul> <p>Perfect \u2705 Let\u2019s create a visual diagram showing how PathLocationStrategy vs HashLocationStrategy behave when a user refreshes a page or directly accesses a URL on a production server.</p>"},{"location":"angular/009/#routing-strategy-behavior-on-production","title":"\ud83c\udf10 Routing Strategy Behavior on Production","text":""},{"location":"angular/009/#1-pathlocationstrategy-html5","title":"1\ufe0f\u20e3 PathLocationStrategy (HTML5)","text":"<pre><code>User navigates directly to http://example.com/about\n    |\n    v\nBrowser sends request to server for /about\n    |\n    v\nServer checks file /about\n    |\n    \u251c\u2500 If server is configured -&gt; redirects to index.html -&gt; Angular router loads AboutComponent\n    \u2514\u2500 If server is NOT configured -&gt; 404 Not Found\n</code></pre> <p>\u2705 Key points:</p> <ul> <li>Clean URLs (<code>/about</code>)</li> <li>SEO-friendly</li> <li>Requires server redirect to <code>index.html</code></li> </ul>"},{"location":"angular/009/#2-hashlocationstrategy_2","title":"2\ufe0f\u20e3 HashLocationStrategy (#)","text":"<pre><code>User navigates directly to http://example.com/#/about\n    |\n    v\nBrowser sends request to server for /\n    |\n    v\nServer serves index.html (ignores everything after #)\n    |\n    v\nAngular reads URL fragment after # -&gt; Loads AboutComponent\n</code></pre> <p>\u2705 Key points:</p> <ul> <li>URL contains <code>#</code> (<code>/#/about</code>)</li> <li>Works on any server (no config needed)</li> <li>Not SEO-friendly</li> </ul>"},{"location":"angular/009/#3-comparison-diagram","title":"3\ufe0f\u20e3 Comparison Diagram","text":"<pre><code>              PathLocationStrategy                     HashLocationStrategy\nUser -&gt; URL: /about                              User -&gt; URL: /#/about\n       |                                                |\n       v                                                v\nServer receives /about                          Server receives /\n       |                                                |\n       v                                                v\nIf redirect configured -&gt; index.html            index.html served\n       |                                                |\n       v                                                v\nAngular router -&gt; AboutComponent                Angular router -&gt; AboutComponent\n       |\n       v\nWorks correctly OR 404 if not configured\n</code></pre> <p>\u2705 Summary:</p> <ul> <li>PathLocationStrategy \u2192 Preferred for production SPA, clean URL, SEO-friendly, server redirect needed.</li> <li>HashLocationStrategy \u2192 Only use if server config not possible, works on static hosting, less SEO-friendly.</li> </ul>"},{"location":"angular/010/","title":"\ud83c\udff7\ufe0f Angular Pipes (Complete Guide)","text":""},{"location":"angular/010/#simple-definition","title":"\ud83d\udd39 Simple Definition","text":"<ul> <li>Pipes in Angular are used to transform data in templates before displaying it.</li> <li>They do not modify the original data, only transform the output.</li> <li>Use the pipe symbol (<code>|</code>) in templates.</li> </ul>"},{"location":"angular/010/#key-points","title":"\ud83d\udd39 Key Points","text":"<ul> <li>Transform displayed data without changing component data.</li> <li>Can be built-in or custom.</li> <li>Can accept parameters.</li> <li>Can be pure or impure.</li> <li>Supports chaining multiple pipes.</li> <li>AsyncPipe automatically subscribes to Observables/Promises and updates the view.</li> </ul>"},{"location":"angular/010/#built-in-pipes-examples","title":"\ud83d\udd39 Built-in Pipes Examples","text":"Pipe Description Example <code>DatePipe</code> Formats date `{{ today date:'fullDate' }}` <code>UpperCasePipe</code> Converts text to uppercase `{{ name uppercase }}` <code>LowerCasePipe</code> Converts text to lowercase `{{ name lowercase }}` <code>CurrencyPipe</code> Formats currency `{{ amount currency:'USD' }}` <code>DecimalPipe</code> Formats numbers `{{ pi number:'1.2-2' }}` <code>PercentPipe</code> Formats as percentage `{{ ratio percent }}` <code>JsonPipe</code> Converts object to JSON string `{{ user json }}` <code>SlicePipe</code> Extracts a substring or array slice `{{ name slice:0:4 }}`"},{"location":"angular/010/#example","title":"Example","text":"<pre><code>// component.ts\ntoday = new Date();\nname = 'Rohit';\namount = 1500;\npi = 3.14159;\nratio = 0.256;\nuser = { name: 'Rohit', age: 25 };\n</code></pre> <pre><code>&lt;p&gt;Date: {{ today | date:'fullDate' }}&lt;/p&gt;\n&lt;p&gt;Uppercase: {{ name | uppercase }}&lt;/p&gt;\n&lt;p&gt;Currency: {{ amount | currency:'USD' }}&lt;/p&gt;\n&lt;p&gt;Number: {{ pi | number:'1.2-2' }}&lt;/p&gt;\n&lt;p&gt;Percent: {{ ratio | percent }}&lt;/p&gt;\n&lt;p&gt;JSON: {{ user | json }}&lt;/p&gt;\n&lt;p&gt;Slice: {{ name | slice:0:4 }}&lt;/p&gt;\n</code></pre>"},{"location":"angular/010/#custom-pipes","title":"\ud83d\udd39 Custom Pipes","text":""},{"location":"angular/010/#reverse-string-pipe","title":"Reverse String Pipe","text":"<pre><code>import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'reverse' })\nexport class ReversePipe implements PipeTransform {\n  transform(value: string): string {\n    return value.split('').reverse().join('');\n  }\n}\n</code></pre> <pre><code>&lt;p&gt;{{ 'Angular' | reverse }}&lt;/p&gt; &lt;!-- Output: ralugnA --&gt;\n</code></pre>"},{"location":"angular/010/#parameterized-pipe","title":"Parameterized Pipe","text":"<pre><code>@Pipe({ name: 'multiply' })\nexport class MultiplyPipe implements PipeTransform {\n  transform(value: number, factor: number): number {\n    return value * factor;\n  }\n}\n</code></pre> <pre><code>&lt;p&gt;{{ 5 | multiply:10 }}&lt;/p&gt; &lt;!-- Output: 50 --&gt;\n</code></pre>"},{"location":"angular/010/#asyncpipe","title":"\ud83d\udd39 AsyncPipe","text":"<ul> <li>Automatically subscribes to Observables or Promises.</li> <li>Updates view whenever new data arrives.</li> </ul> <pre><code>users$ = this.http.get&lt;User[]&gt;('https://api.example.com/users');\n</code></pre> <pre><code>&lt;ul&gt;\n  &lt;li *ngFor=\"let user of users$ | async\"&gt;{{ user.name }}&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <ul> <li>\u2705 No need to manually subscribe/unsubscribe.</li> </ul>"},{"location":"angular/010/#chaining-pipes","title":"\ud83d\udd39 Chaining Pipes","text":"<ul> <li>Multiple pipes can be applied sequentially.</li> </ul> <pre><code>&lt;p&gt;{{ today | date:'shortDate' | uppercase }}&lt;/p&gt;\n</code></pre>"},{"location":"angular/010/#pure-vs-impure-pipes","title":"\ud83d\udd39 Pure vs Impure Pipes","text":"Feature Pure Pipe Impure Pipe Execution Only when input changes Every change detection cycle Performance \u2705 Efficient \u274c Less efficient Use Case Static transformation Dynamic data like arrays <pre><code>@Pipe({ name: 'custom', pure: false }) // impure pipe\n</code></pre>"},{"location":"angular/010/#real-life-use-cases","title":"\ud83d\udd39 Real-life Use Cases","text":"<ul> <li>Gmail: Format email date (<code>date</code> pipe), truncate subject (<code>slice</code> pipe).</li> <li>Jira: Format ticket creation date, status labels (<code>uppercase</code>, <code>lowercase</code>).</li> <li>E-commerce: Format price (<code>currency</code>), percentage discount (<code>percent</code>), product list (<code>slice</code>).</li> <li>AsyncPipe: Fetching live notifications, emails, or messages.</li> </ul>"},{"location":"angular/010/#diagram","title":"\ud83d\udd39 Diagram","text":"<pre><code>Component Data / Observable\n          |\n          v\nTemplate Expression -&gt; {{ data | pipeName:args | pipe2 }}\n          |\n          v\nPipe transforms data sequentially\n          |\n          v\nTransformed Output Displayed\n</code></pre>"},{"location":"angular/010/#angular-pipes-quick-reference-table","title":"\ud83c\udff7\ufe0f Angular Pipes Quick Reference Table","text":"Pipe Name Purpose / Description Example Parameters / Notes <code>DatePipe</code> Formats date and time `{{ today date:'fullDate' }}` Format string: <code>shortDate</code>, <code>medium</code>, <code>longDate</code>, etc. <code>UpperCasePipe</code> Converts text to uppercase `{{ name uppercase }}` None <code>LowerCasePipe</code> Converts text to lowercase `{{ name lowercase }}` None <code>CurrencyPipe</code> Formats numbers as currency `{{ amount currency:'USD' }}` Currency code, symbol, digits <code>DecimalPipe</code> Formats numbers with decimal points `{{ pi number:'1.2-2' }}` <code>minIntegerDigits.minFraction-maxFraction</code> <code>PercentPipe</code> Formats numbers as percentage `{{ ratio percent }}` Optional fraction digits <code>JsonPipe</code> Converts object/array to JSON string `{{ user json }}` None <code>SlicePipe</code> Extracts substring or sub-array `{{ name slice:0:4 }}` Start index, end index <code>AsyncPipe</code> Subscribes to Observable / Promise `{{ users\\$ async }}` None <code>TitleCasePipe</code> Converts string to title case `{{ title titlecase }}` None <code>LowerCasePipe</code> Converts string to lowercase `{{ text lowercase }}` None <code>CustomPipe</code> User-defined transformation `{{ 'Angular' reverse }}` Parameters depend on implementation <code>MultiplyPipe</code> User-defined parameterized pipe `{{ 5 multiply:10 }}` Factor: number"},{"location":"angular/010/#notes-for-table","title":"Notes for Table:","text":"<ul> <li>Built-in Pipes: <code>DatePipe</code>, <code>UpperCasePipe</code>, <code>LowerCasePipe</code>, <code>CurrencyPipe</code>, <code>DecimalPipe</code>, <code>PercentPipe</code>, <code>JsonPipe</code>, <code>SlicePipe</code>, <code>TitleCasePipe</code>, <code>AsyncPipe</code>.</li> <li>Custom Pipes: Create with <code>@Pipe</code> decorator and <code>PipeTransform</code> interface. Can accept parameters.</li> <li>AsyncPipe: Automatically handles subscription and unsubscription of Observables/Promises.</li> </ul>"},{"location":"angular/011/","title":"\ud83c\udf10 Angular HTTP Module","text":""},{"location":"angular/011/#simple-definition","title":"\ud83d\udd39 Simple Definition","text":"<ul> <li>The HttpClientModule in Angular allows the application to communicate with remote servers over HTTP.</li> <li>It is used to make HTTP requests such as GET, POST, PUT, DELETE, etc., and receive responses.</li> <li>It returns Observables from RxJS, making it easy to handle asynchronous data streams.</li> </ul>"},{"location":"angular/011/#key-points","title":"\ud83d\udd39 Key Points","text":"<ul> <li>Angular HTTP module is part of <code>@angular/common/http</code>.</li> <li>Requires importing <code>HttpClientModule</code> in <code>AppModule</code>.</li> <li>Provides HttpClient service to make HTTP calls.</li> <li>Supports interceptors to handle request/response globally.</li> <li>Supports request headers, query parameters, error handling, and type safety.</li> <li>Works seamlessly with RxJS operators (<code>map</code>, <code>catchError</code>, <code>tap</code>).</li> </ul>"},{"location":"angular/011/#setup","title":"\ud83d\udd39 Setup","text":"<pre><code>// app.module.ts\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    HttpClientModule // Import HttpClientModule\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n</code></pre>"},{"location":"angular/011/#usage-example","title":"\ud83d\udd39 Usage Example","text":""},{"location":"angular/011/#1-get-request","title":"1. GET Request","text":"<pre><code>// user.service.ts\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class UserService {\n  private apiUrl = 'https://jsonplaceholder.typicode.com/users';\n\n  constructor(private http: HttpClient) {}\n\n  getUsers(): Observable&lt;any[]&gt; {\n    return this.http.get&lt;any[]&gt;(this.apiUrl);\n  }\n}\n</code></pre> <pre><code>// component.ts\nusers: any[] = [];\n\nconstructor(private userService: UserService) {}\n\nngOnInit() {\n  this.userService.getUsers().subscribe(data =&gt; {\n    this.users = data;\n  });\n}\n</code></pre> <pre><code>&lt;ul&gt;\n  &lt;li *ngFor=\"let user of users\"&gt;{{ user.name }}&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>"},{"location":"angular/011/#2-post-request","title":"2. POST Request","text":"<pre><code>addUser(user: any): Observable&lt;any&gt; {\n  return this.http.post(this.apiUrl, user);\n}\n</code></pre>"},{"location":"angular/011/#3-put-request","title":"3. PUT Request","text":"<pre><code>updateUser(userId: number, user: any): Observable&lt;any&gt; {\n  return this.http.put(`${this.apiUrl}/${userId}`, user);\n}\n</code></pre>"},{"location":"angular/011/#4-delete-request","title":"4. DELETE Request","text":"<pre><code>deleteUser(userId: number): Observable&lt;any&gt; {\n  return this.http.delete(`${this.apiUrl}/${userId}`);\n}\n</code></pre>"},{"location":"angular/011/#headers-params-example","title":"\ud83d\udd39 Headers &amp; Params Example","text":"<pre><code>const headers = { 'Authorization': 'Bearer token123' };\nconst params = { page: '1', limit: '10' };\n\nthis.http.get(this.apiUrl, { headers, params }).subscribe();\n</code></pre>"},{"location":"angular/011/#error-handling-with-rxjs","title":"\ud83d\udd39 Error Handling with RxJS","text":"<pre><code>import { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\n\nthis.http.get(this.apiUrl)\n  .pipe(\n    catchError(error =&gt; {\n      console.error('Error:', error);\n      return throwError(error);\n    })\n  ).subscribe();\n</code></pre>"},{"location":"angular/011/#interceptors-example","title":"\ud83d\udd39 Interceptors Example","text":"<pre><code>// auth.interceptor.ts\nimport { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler } from '@angular/common/http';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  intercept(req: HttpRequest&lt;any&gt;, next: HttpHandler) {\n    const clonedReq = req.clone({\n      headers: req.headers.set('Authorization', 'Bearer token123')\n    });\n    return next.handle(clonedReq);\n  }\n}\n</code></pre> <pre><code>// app.module.ts\nproviders: [\n  { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true }\n]\n</code></pre> <p>\u2705 Effect: All outgoing HTTP requests automatically include the Authorization header.</p>"},{"location":"angular/011/#diagram","title":"\ud83d\udd39 Diagram","text":"<pre><code>Component\n   |\n   v\nUserService (HttpClient)\n   |\n   v\nHTTP Request -&gt; Server\n   |\n   v\nServer Response -&gt; Observable\n   |\n   v\nComponent subscribes and renders data\n</code></pre>"},{"location":"angular/011/#real-life-use-cases","title":"\ud83d\udd39 Real-life Use Cases","text":"<ul> <li>Gmail: Fetch emails via API (<code>GET</code>), send email (<code>POST</code>).</li> <li>Jira: Get project issues, update tickets (<code>PUT</code>), delete tasks (<code>DELETE</code>).</li> <li>E-commerce: Load products (<code>GET</code>), add to cart (<code>POST</code>), update order status (<code>PUT</code>).</li> <li>Interceptors: Add Auth token to all requests, handle global errors, loading spinners.</li> </ul>"},{"location":"angular/012/","title":"\u26a1 Angular Compilation: JIT vs AOT","text":""},{"location":"angular/012/#simple-definition","title":"\ud83d\udd39 Simple Definition","text":"<ul> <li> <p>JIT (Just-in-Time) Compilation:</p> </li> <li> <p>Angular compiles your app in the browser at runtime.</p> </li> <li> <p>Templates and components are compiled when the app runs.</p> </li> <li> <p>AOT (Ahead-of-Time) Compilation:</p> </li> <li> <p>Angular compiles your app during build time.</p> </li> <li>Templates and components are compiled before the browser loads the app.</li> </ul>"},{"location":"angular/012/#key-points","title":"\ud83d\udd39 Key Points","text":"Feature JIT Compilation AOT Compilation When compilation happens In the browser (runtime) During build (before deployment) Build time Fast build, slower runtime Slower build, faster runtime Error detection Errors shown only at runtime Errors detected at compile-time Bundle size Larger (templates included in JS) Smaller (templates pre-compiled) Security Vulnerable to injection attacks Safer, templates pre-compiled Startup time Slower (browser compiles) Faster (pre-compiled JS) Production usage \u274c Not recommended \u2705 Recommended"},{"location":"angular/012/#when-to-use","title":"\ud83d\udd39 When to Use","text":"<ul> <li> <p>JIT</p> </li> <li> <p>During development \u2192 faster rebuild, easier debugging.</p> </li> <li> <p>Run with <code>ng serve</code> (default in dev).</p> </li> <li> <p>AOT</p> </li> <li> <p>During production deployment \u2192 faster startup, smaller bundle, more secure.</p> </li> <li>Run with <code>ng build --prod</code> or Angular 13+: <code>ng build</code> (AOT is default).</li> </ul>"},{"location":"angular/012/#how-they-work","title":"\ud83d\udd39 How They Work","text":""},{"location":"angular/012/#jit-flow","title":"JIT Flow","text":"<pre><code>Source Code + Templates\n         |\n         v\nBrowser compiles templates and components\n         |\n         v\nApp runs with compiled code\n</code></pre>"},{"location":"angular/012/#aot-flow","title":"AOT Flow","text":"<pre><code>Source Code + Templates\n         |\n         v\nAngular compiler compiles templates &amp; components at build\n         |\n         v\nPrecompiled JavaScript bundle\n         |\n         v\nBrowser loads app -&gt; faster startup\n</code></pre>"},{"location":"angular/012/#code-example","title":"\ud83d\udd39 Code Example","text":"<ul> <li>JIT Compilation (Development)</li> </ul> <pre><code>ng serve\n</code></pre> <ul> <li>AOT Compilation (Production)</li> </ul> <pre><code>ng build --prod\n# Angular 13+ default uses AOT\n</code></pre> <ul> <li>Enable/Force AOT in dev</li> </ul> <pre><code>ng serve --aot\n</code></pre>"},{"location":"angular/012/#real-life-use-case","title":"\ud83d\udd39 Real-life Use Case","text":"<ul> <li> <p>Gmail/Jira</p> </li> <li> <p>AOT is used in production \u2192 faster page load, secure templates, fewer runtime errors.</p> </li> <li> <p>Development environment</p> </li> <li> <p>JIT used \u2192 faster rebuilds, easy debugging, hot reload.</p> </li> </ul>"},{"location":"angular/012/#summary","title":"\ud83d\udd39 Summary","text":"Feature Development Production Compilation JIT AOT Bundle size Larger Smaller Startup speed Slower Faster Security Less secure More secure Error detection Runtime Compile-time <p>\u2705 Takeaway:</p> <ul> <li>Always use AOT for production.</li> <li>Use JIT only during development.</li> </ul>"},{"location":"angular/012/#1-jit-just-in-time-compilation-flow","title":"1\ufe0f\u20e3 JIT (Just-in-Time) Compilation Flow","text":"<pre><code>Source Code + Templates\n        |\n        v\nBrowser loads app\n        |\n        v\nAngular Compiler runs in Browser (Runtime Compilation)\n        |\n        v\nTemplates &amp; Components compiled\n        |\n        v\nApp executes\n</code></pre> <p>Key Points:</p> <ul> <li>Compilation happens in the browser.</li> <li>Slower startup, because browser compiles templates before running.</li> <li>Errors detected at runtime.</li> <li>Bundle size larger (templates included in JS).</li> <li>\u2705 Use: Development (<code>ng serve</code>)</li> </ul>"},{"location":"angular/012/#2-aot-ahead-of-time-compilation-flow","title":"2\ufe0f\u20e3 AOT (Ahead-of-Time) Compilation Flow","text":"<pre><code>Source Code + Templates\n        |\n        v\nAngular Compiler runs at Build Time\n        |\n        v\nTemplates &amp; Components pre-compiled\n        |\n        v\nOptimized JavaScript bundle\n        |\n        v\nBrowser loads app -&gt; Fast startup\n</code></pre> <p>Key Points:</p> <ul> <li>Compilation happens before browser execution.</li> <li>Faster startup, because templates are pre-compiled.</li> <li>Errors detected at compile-time.</li> <li>Bundle size smaller.</li> <li>\u2705 Use: Production (<code>ng build --prod</code>)</li> </ul>"},{"location":"angular/012/#3-side-by-side-comparison-diagram","title":"3\ufe0f\u20e3 Side-by-Side Comparison Diagram","text":"<pre><code>           JIT Compilation                     AOT Compilation\n---------------------------            -----------------------------\nSource + Templates                     Source + Templates\n       |                                     |\n       v                                     v\nBrowser runtime compilation          Build-time compilation\n       |                                     |\n       v                                     v\nTemplates compiled in browser       Templates pre-compiled\n       |                                     |\n       v                                     v\nApp executes                        Browser loads optimized JS\n</code></pre>"},{"location":"angular/012/#4-bundle-size-startup-comparison","title":"4\ufe0f\u20e3 Bundle Size &amp; Startup Comparison","text":"Feature JIT (Dev) AOT (Prod) Compilation Browser Build time Startup Time Slower Faster Bundle Size Larger Smaller Error Detection Runtime Compile-time Security Moderate More secure Use Case Development Production <p>\u2705 Takeaway:</p> <ul> <li>JIT \u2192 Use during development for faster rebuilds and debugging.</li> <li>AOT \u2192 Use for production to reduce startup time, detect errors early, and create smaller bundles.</li> </ul>"},{"location":"angular/013/","title":"\ud83d\udee0\ufe0f Angular Services","text":""},{"location":"angular/013/#simple-definition","title":"\ud83d\udd39 Simple Definition","text":"<ul> <li>Service in Angular is a class that provides reusable logic or data which can be shared across multiple components.</li> <li>Services do not have templates, unlike components.</li> <li>Typically used for business logic, HTTP requests, state management, utility functions.</li> </ul>"},{"location":"angular/013/#key-points","title":"\ud83d\udd39 Key Points","text":"<ul> <li>Services are singleton by default (when provided in <code>root</code>).</li> <li>Promote code reusability and separation of concerns.</li> <li>Used with Dependency Injection (DI) to provide service instances to components.</li> <li> <p>Can be provided in:</p> </li> <li> <p><code>root</code> (singleton, available app-wide)</p> </li> <li><code>component</code> (service instance scoped to that component)</li> </ul>"},{"location":"angular/013/#creating-a-service","title":"\ud83d\udd39 Creating a Service","text":"<pre><code>ng generate service user\n</code></pre> <pre><code>// user.service.ts\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root' // makes the service singleton\n})\nexport class UserService {\n  users: string[] = ['Rohit', 'Anjali', 'Suresh'];\n\n  constructor() {}\n\n  getUsers(): string[] {\n    return this.users;\n  }\n\n  addUser(user: string) {\n    this.users.push(user);\n  }\n}\n</code></pre>"},{"location":"angular/013/#using-service-in-a-component","title":"\ud83d\udd39 Using Service in a Component","text":"<pre><code>// user.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { UserService } from '../user.service';\n\n@Component({\n  selector: 'app-user',\n  template: `\n    &lt;ul&gt;\n      &lt;li *ngFor=\"let user of users\"&gt;{{ user }}&lt;/li&gt;\n    &lt;/ul&gt;\n  `\n})\nexport class UserComponent implements OnInit {\n  users: string[] = [];\n\n  constructor(private userService: UserService) {}\n\n  ngOnInit() {\n    this.users = this.userService.getUsers();\n  }\n}\n</code></pre>"},{"location":"angular/013/#dependency-injection","title":"\ud83d\udd39 Dependency Injection","text":"<ul> <li>Angular injects service instances into components automatically.</li> <li>Scopes:</li> </ul> Scope Behavior Example <code>providedIn: 'root'</code> Singleton, shared across app Common services like <code>AuthService</code> <code>providedIn: Component</code> New instance for each component instance Component-specific state services Module providers Available to all components in module Feature module service"},{"location":"angular/013/#using-service-for-http","title":"\ud83d\udd39 Using Service for HTTP","text":"<pre><code>// user.service.ts\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class UserService {\n  constructor(private http: HttpClient) {}\n\n  getUsers(): Observable&lt;any&gt; {\n    return this.http.get('https://jsonplaceholder.typicode.com/users');\n  }\n}\n</code></pre> <pre><code>// component.ts\nthis.userService.getUsers().subscribe(data =&gt; this.users = data);\n</code></pre>"},{"location":"angular/013/#real-life-use-cases","title":"\ud83d\udd39 Real-life Use Cases","text":"<ul> <li>Gmail \u2192 Service to fetch emails, manage labels, mark read/unread.</li> <li>Jira \u2192 Service to fetch project issues, manage tickets, save filters.</li> <li>E-commerce \u2192 Cart service, product service, order service.</li> <li>AuthService \u2192 Manage login/logout and JWT token across app.</li> </ul>"},{"location":"angular/013/#singleton-behavior","title":"\ud83d\udd39 Singleton Behavior","text":"<ul> <li>Service provided in <code>root</code> \u2192 one instance for the entire app.</li> <li>Service provided in component \u2192 new instance for each component.</li> <li>Promotes centralized state management (e.g., shared cart or authentication state).</li> </ul>"},{"location":"angular/013/#diagram","title":"\ud83d\udd39 Diagram","text":"<pre><code>UserService (singleton)\n        |\n        v\nComponent A ------&gt; uses getUsers()\nComponent B ------&gt; uses addUser()\n        |\n        v\nShared state across components\n</code></pre> <p>\u2705 Takeaway:</p> <ul> <li>Services separate logic from UI.</li> <li>Dependency Injection ensures single instances or scoped instances.</li> <li>Common for HTTP calls, shared state, utility methods, and feature modules.</li> </ul>"},{"location":"angular/014/","title":"RxJS","text":"<p>Perfect \u2705 Let\u2019s create a complete Angular RxJS documentation for your reference, with simple definitions, key points, examples, operators, diagrams, and real-life use cases.</p>"},{"location":"angular/014/#angular-rxjs-reactive-extensions-for-javascript","title":"\u26a1 Angular RxJS (Reactive Extensions for JavaScript)","text":""},{"location":"angular/014/#simple-definition","title":"\ud83d\udd39 Simple Definition","text":"<ul> <li>RxJS is a library for reactive programming using Observables to handle asynchronous data streams.</li> <li>It allows subscription to data, transformation of streams, composition, and event handling.</li> <li>Angular heavily uses RxJS for HTTP calls, forms, routing, and event handling.</li> </ul>"},{"location":"angular/014/#key-points","title":"\ud83d\udd39 Key Points","text":"<ul> <li> <p>Core concepts:</p> </li> <li> <p>Observable \u2192 source of data (stream).</p> </li> <li>Observer \u2192 listens to the Observable.</li> <li>Subscription \u2192 connects Observer to Observable.</li> <li>Operators \u2192 functions to transform, filter, or combine streams.</li> <li>Subject \u2192 special type of Observable that is multicast (multiple subscribers).</li> <li>RxJS is used everywhere in Angular, e.g., <code>HttpClient.get()</code> returns an Observable.</li> <li>Provides powerful operators for data transformation, combination, error handling, and throttling.</li> </ul>"},{"location":"angular/014/#creating-an-observable","title":"\ud83d\udd39 Creating an Observable","text":"<pre><code>import { Observable } from 'rxjs';\n\nconst observable = new Observable&lt;number&gt;(observer =&gt; {\n  observer.next(1);\n  observer.next(2);\n  observer.next(3);\n  observer.complete();\n});\n\nobservable.subscribe({\n  next: (value) =&gt; console.log(value),\n  complete: () =&gt; console.log('Done')\n});\n</code></pre> <p>Output:</p> <pre><code>1\n2\n3\nDone\n</code></pre>"},{"location":"angular/014/#using-rxjs-with-angular-http","title":"\ud83d\udd39 Using RxJS with Angular HTTP","text":"<pre><code>// user.service.ts\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\n@Injectable({ providedIn: 'root' })\nexport class UserService {\n  constructor(private http: HttpClient) {}\n\n  getUsers(): Observable&lt;string[]&gt; {\n    return this.http.get&lt;any[]&gt;('https://jsonplaceholder.typicode.com/users')\n      .pipe(\n        map(users =&gt; users.map(u =&gt; u.name)), // transform data\n        catchError(err =&gt; { throw 'Error fetching users'; })\n      );\n  }\n}\n</code></pre>"},{"location":"angular/014/#common-rxjs-operators","title":"\ud83d\udd39 Common RxJS Operators","text":"Operator Description Example <code>map</code> Transform values emitted by Observable <code>obs$.pipe(map(x =&gt; x * 2))</code> <code>filter</code> Filter values based on condition <code>obs$.pipe(filter(x =&gt; x &gt; 5))</code> <code>take</code> Take first n values <code>obs$.pipe(take(3))</code> <code>mergeMap</code> Flatten inner Observables <code>obs$.pipe(mergeMap(val =&gt; http.get(...)))</code> <code>switchMap</code> Switch to new Observable, cancel previous Useful in search inputs <code>tap</code> Perform side-effects without changing value <code>obs$.pipe(tap(x =&gt; console.log(x)))</code> <code>catchError</code> Handle errors in Observable <code>obs$.pipe(catchError(err =&gt; of([])))</code> <code>debounceTime</code> Wait for time period before emitting Useful for input events"},{"location":"angular/014/#subjects","title":"\ud83d\udd39 Subjects","text":"<ul> <li>Subject \u2192 both Observable + Observer.</li> <li>Useful for multicasting data to multiple subscribers.</li> </ul> <pre><code>import { Subject } from 'rxjs';\n\nconst subject = new Subject&lt;number&gt;();\n\nsubject.subscribe(value =&gt; console.log('Observer 1:', value));\nsubject.subscribe(value =&gt; console.log('Observer 2:', value));\n\nsubject.next(1);\nsubject.next(2);\n</code></pre> <p>Output:</p> <pre><code>Observer 1: 1\nObserver 2: 1\nObserver 1: 2\nObserver 2: 2\n</code></pre>"},{"location":"angular/014/#real-life-use-cases-in-angular","title":"\ud83d\udd39 Real-life Use Cases in Angular","text":"<ul> <li> <p>Gmail:</p> </li> <li> <p>Stream of new emails \u2192 Observable.</p> </li> <li>Search input debounce \u2192 <code>debounceTime()</code> + <code>switchMap()</code> for API calls.</li> <li> <p>Jira:</p> </li> <li> <p>Live updates on ticket status \u2192 Subjects.</p> </li> <li>Filtering tickets \u2192 <code>filter()</code> + <code>map()</code>.</li> <li> <p>Forms:</p> </li> <li> <p>Reactive forms value changes \u2192 <code>formControl.valueChanges</code> Observable.</p> </li> <li> <p>HTTP Requests:</p> </li> <li> <p><code>HttpClient.get()</code> returns Observables \u2192 use <code>map()</code>, <code>catchError()</code>.</p> </li> </ul>"},{"location":"angular/014/#diagram","title":"\ud83d\udd39 Diagram","text":"<pre><code>Observable (Source)  ---&gt;  Operators (map, filter, etc.)  ---&gt;  Subscriber (Component)\n       |\n       v\n     Subject (multicast to multiple subscribers)\n</code></pre>"},{"location":"angular/014/#summary","title":"\ud83d\udd39 Summary","text":"<ul> <li>Observables: Stream of async data.</li> <li>Operators: Transform, filter, combine, or manage streams.</li> <li>Subjects: Multicast to multiple subscribers.</li> <li>Angular Integration: HTTP calls, forms, routing, events.</li> </ul>"},{"location":"angular/015/","title":"\ud83d\udd39 Regular Expressions (Regex) in JavaScript / Angular","text":""},{"location":"angular/015/#simple-definition","title":"\ud83d\udd39 Simple Definition","text":"<ul> <li>Regex is a pattern matching technique used to find, validate, or replace text in strings.</li> <li>In Angular, regex is commonly used for form validation, input patterns, and string searches.</li> </ul>"},{"location":"angular/015/#key-points","title":"\ud83d\udd39 Key Points","text":"<ul> <li>Regex matches patterns rather than exact strings.</li> <li>Can be used with <code>RegExp</code> object or string methods like <code>match</code>, <code>replace</code>, <code>test</code>, <code>search</code>.</li> <li>Supports special characters and quantifiers for flexible pattern matching.</li> <li>Frequently used in Angular reactive forms for validation.</li> </ul>"},{"location":"angular/015/#regex-syntax","title":"\ud83d\udd39 Regex Syntax","text":"Symbol / Syntax Meaning / Description Example <code>^</code> Start of string <code>^abc</code> \u2192 matches \"abc\" at start <code>$</code> End of string <code>xyz$</code> \u2192 matches \"xyz\" at end <code>.</code> Any character except newline <code>a.c</code> \u2192 matches \"abc\", \"a1c\" <code>*</code> 0 or more occurrences <code>a*</code> \u2192 \"\", \"a\", \"aa\" <code>+</code> 1 or more occurrences <code>a+</code> \u2192 \"a\", \"aa\", \"aaa\" <code>?</code> 0 or 1 occurrence (optional) <code>a?</code> \u2192 \"\" or \"a\" <code>[]</code> Character set <code>[abc]</code> \u2192 \"a\", \"b\", or \"c\" ` ` OR operator `cat dog` \u2192 matches \"cat\" or \"dog\" <code>()</code> Grouping <code>(abc)+</code> \u2192 matches \"abc\", \"abcabc\" <code>\\d</code> Any digit (0-9) <code>\\d+</code> \u2192 \"123\", \"4\" <code>\\D</code> Non-digit character <code>\\D+</code> \u2192 \"abc\" <code>\\w</code> Alphanumeric + underscore <code>\\w+</code> \u2192 \"user_123\" <code>\\W</code> Non-word character <code>\\W+</code> \u2192 \"!@#\" <code>\\s</code> Whitespace character <code>\\s+</code> \u2192 \" \" <code>\\S</code> Non-whitespace character <code>\\S+</code> \u2192 \"abc\""},{"location":"angular/015/#examples-in-javascript-angular","title":"\ud83d\udd39 Examples in JavaScript / Angular","text":""},{"location":"angular/015/#1-validate-email","title":"1. Validate Email","text":"<pre><code>const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n\nconst email = 'test@example.com';\nconsole.log(emailRegex.test(email)); // true\n</code></pre>"},{"location":"angular/015/#2-validate-phone-number-10-digits","title":"2. Validate Phone Number (10 digits)","text":"<pre><code>const phoneRegex = /^\\d{10}$/;\n\nconst phone = '9876543210';\nconsole.log(phoneRegex.test(phone)); // true\n</code></pre>"},{"location":"angular/015/#3-validate-password-min-8-chars-at-least-1-number-1-uppercase-1-special-char","title":"3. Validate Password (Min 8 chars, at least 1 number, 1 uppercase, 1 special char)","text":"<pre><code>const passwordRegex = /^(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&amp;*]).{8,}$/;\n\nconst password = 'Abc123@!';\nconsole.log(passwordRegex.test(password)); // true\n</code></pre>"},{"location":"angular/015/#4-angular-reactive-form-example","title":"4. Angular Reactive Form Example","text":"<pre><code>import { FormGroup, FormControl, Validators } from '@angular/forms';\n\nthis.loginForm = new FormGroup({\n  email: new FormControl('', [Validators.required, Validators.pattern(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/)]),\n  password: new FormControl('', [Validators.required, Validators.pattern(/^(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&amp;*]).{8,}$/)])\n});\n</code></pre> <pre><code>&lt;form [formGroup]=\"loginForm\"&gt;\n  &lt;input type=\"email\" formControlName=\"email\" placeholder=\"Email\"&gt;\n  &lt;div *ngIf=\"loginForm.controls.email.invalid\"&gt;Invalid Email&lt;/div&gt;\n\n  &lt;input type=\"password\" formControlName=\"password\" placeholder=\"Password\"&gt;\n  &lt;div *ngIf=\"loginForm.controls.password.invalid\"&gt;Invalid Password&lt;/div&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"angular/015/#real-life-use-cases","title":"\ud83d\udd39 Real-life Use Cases","text":"<ul> <li>Gmail \u2192 Validate email addresses during login or registration.</li> <li>Jira \u2192 Validate project codes, ticket numbers.</li> <li>E-commerce \u2192 Validate phone numbers, postal codes, and passwords.</li> <li>Form validations \u2192 Reactive forms or template-driven forms.</li> </ul>"},{"location":"angular/015/#diagram","title":"\ud83d\udd39 Diagram","text":"<pre><code>User Input\n    |\n    v\nRegex Pattern\n    |\n    +--&gt; Matches? ----&gt; Valid Input\n    |\n    +--&gt; No Match ----&gt; Show Error\n</code></pre> <p>\u2705 Takeaway:</p> <ul> <li>Regex is powerful for input validation and pattern matching.</li> <li>Works well with Angular forms, pipes, and custom validators.</li> <li>Learn common patterns for emails, phone numbers, passwords, and alphanumeric inputs.</li> </ul>"},{"location":"angular/016/","title":"Versions","text":"<p>Absolutely! Let's explore the evolution of Angular from version 16 through 20, along with a brief overview of AngularJS, highlighting the key features, the problems they addressed, and the reasons behind their introduction.</p>"},{"location":"angular/016/#angularjs-1x","title":"\ud83d\udd39 AngularJS (1.x)","text":"<p>Released: 2010</p> <p>Key Features:</p> <ul> <li>Two-way Data Binding: Automatically synchronizes data between the model and view.</li> <li>Dependency Injection: Simplifies the management of services and components.</li> <li>Directives: Extend HTML capabilities with custom elements and attributes.</li> <li>Routing: Enables navigation between views and deep linking.</li> </ul> <p>Problems Addressed:</p> <ul> <li>Simplified development of single-page applications (SPAs).</li> <li>Reduced boilerplate code through declarative syntax.</li> <li>Enhanced testability and maintainability of code.</li> </ul> <p>Why It Came:</p> <ul> <li>To provide a framework that facilitates the development of dynamic web applications with less effort.</li> </ul>"},{"location":"angular/016/#angular-16-released-may-2023","title":"\ud83d\udd39 Angular 16 (Released: May 2023)","text":"<p>Key Features:</p> <ul> <li>Signals: Introduced a new reactivity model, allowing for fine-grained control over state changes.</li> <li>Enhanced Hydration: Improved server-side rendering with non-destructive hydration, reducing content flickering.</li> <li>Faster Builds: Integrated esbuild for faster build times.</li> <li>Standalone Components: Simplified component creation without the need for NgModules.</li> </ul> <p>Problems Addressed:</p> <ul> <li>Improved performance in server-side rendered applications.</li> <li>Reduced complexity in component management.</li> <li>Enhanced developer experience with faster builds.</li> </ul> <p>Why It Came:</p> <ul> <li>To modernize Angular's architecture and improve performance and developer productivity.</li> </ul>"},{"location":"angular/016/#angular-17-released-november-2023","title":"\ud83d\udd39 Angular 17 (Released: November 2023)","text":"<p>Key Features:</p> <ul> <li>Declarative Control Flow: Introduced a new block template syntax for more intuitive control flow.</li> <li>Deferrable Loading: Allowed for deferred loading of components to improve initial load times.</li> <li>TypeScript 5.2 Support: Enhanced compatibility with the latest TypeScript features.</li> <li>Improved Server-Side Rendering: Optimized hydration and event handling for SSR.</li> </ul> <p>Problems Addressed:</p> <ul> <li>Simplified template syntax for developers.</li> <li>Improved application performance and load times.</li> <li>Ensured compatibility with the latest TypeScript versions.</li> </ul> <p>Why It Came:</p> <ul> <li>To enhance developer experience and application performance.</li> </ul>"},{"location":"angular/016/#angular-18-released-may-2024","title":"\ud83d\udd39 Angular 18 (Released: May 2024)","text":"<p>Key Features:</p> <ul> <li>Zoneless Change Detection: Eliminated the need for Zone.js, reducing overhead and improving performance.</li> <li>Function-based Route Redirects: Allowed for dynamic route redirection based on application logic.</li> <li>TypeScript 4.7 Support: Introduced support for new TypeScript features like template literal types.</li> <li>Enhanced ng-template API: Improved the flexibility and reusability of templates.</li> </ul> <p>Problems Addressed:</p> <ul> <li>Reduced complexity in change detection mechanism.</li> <li>Provided more dynamic routing capabilities.</li> <li>Enhanced support for modern TypeScript features.</li> </ul> <p>Why It Came:</p> <ul> <li>To modernize Angular's architecture and align with the latest web standards.</li> </ul>"},{"location":"angular/016/#angular-19-released-november-2024","title":"\ud83d\udd39 Angular 19 (Released: November 2024)","text":"<p>Key Features:</p> <ul> <li>Incremental Hydration: Improved server-side rendering performance by hydrating parts of the application incrementally.</li> <li>Event Replay: Ensured that user interactions are preserved during server-side rendering.</li> <li>Standalone Components by Default: Made standalone components the default, simplifying component creation.</li> <li>Strict Standalone Enforcement: Enforced stricter rules for standalone components to ensure consistency.</li> </ul> <p>Problems Addressed:</p> <ul> <li>Enhanced performance in server-side rendered applications.</li> <li>Improved user experience by preserving interactions.</li> <li>Simplified component creation and enforcement of best practices.</li> </ul> <p>Why It Came:</p> <ul> <li>To further optimize performance and streamline development processes.</li> </ul>"},{"location":"angular/016/#angular-20-released-may-2025","title":"\ud83d\udd39 Angular 20 (Released: May 2025)","text":"<p>Key Features:</p> <ul> <li>Signal-based Reactivity: Introduced signal-based reactivity for more predictable state management.</li> <li>Stable Incremental Hydration: Stabilized incremental hydration for consistent server-side rendering performance.</li> <li>Dynamic Component Creation: Allowed for dynamic creation of components with directives and bindings.</li> <li>Extended Template Expression Syntax: Enhanced the flexibility of template expressions.</li> </ul> <p>Problems Addressed:</p> <ul> <li>Improved state management and reactivity.</li> <li>Ensured consistent performance in server-side rendering.</li> <li>Provided more flexibility in component creation and template expressions.</li> </ul> <p>Why It Came:</p> <ul> <li>To provide developers with more powerful tools for building dynamic applications.</li> </ul>"},{"location":"angular/016/#angular-version-comparison-table","title":"\ud83d\uddc2\ufe0f Angular Version Comparison Table","text":"Version Release Date Key Features / Updates Problems Solved / Improvements Why It Came / Purpose AngularJS 1.x 2010 - Two-way Data Binding- Dependency Injection- Directives- Routing - Simplified SPA development- Reduced boilerplate- Improved testability - To facilitate dynamic web app development with less effort Angular 16 May 2023 - Signals for reactivity- Enhanced SSR hydration- Faster builds (esbuild)- Standalone components - Improved server-side rendering performance- Reduced complexity in component management- Faster builds - Modernize Angular architecture- Improve performance &amp; DX Angular 17 Nov 2023 - Declarative control flow- Deferrable component loading- TypeScript 5.2 support- Improved SSR - Simplified template syntax- Better initial load performance- Latest TS support - Enhance developer experience- Improve performance Angular 18 May 2024 - Zoneless change detection- Function-based route redirects- TS 4.7 support- Enhanced ng-template API - Reduce change detection overhead- More dynamic routing- Modern TypeScript support - Modernize Angular- Align with latest web standards Angular 19 Nov 2024 - Incremental hydration- Event replay- Standalone components by default- Strict standalone enforcement - Improve SSR performance- Preserve user interactions- Simplify component creation - Optimize performance- Streamline development Angular 20 May 2025 - Signal-based reactivity- Stable incremental hydration- Dynamic component creation- Extended template syntax - Improved state management- Consistent SSR performance- Flexible component/template creation - Provide developers powerful tools for dynamic applications <p>\u2705 Takeaways from the Table:</p> <ul> <li>AngularJS \u2192 Angular: Shifted from 2-way binding and scope-based architecture to a modular, component-based, reactive framework.</li> <li>Angular 16\u201320: Focused on performance, SSR hydration, reactivity, and developer experience.</li> <li>Why it evolved: Each version aimed to solve performance bottlenecks, improve reactivity, simplify component management, and support modern TypeScript/web standards.</li> </ul>"},{"location":"angular/017/","title":"Signal","text":"<p>Perfect \u2705 Let\u2019s create a complete documentation for Angular Signals in your structured format: simple definition, key points, code examples, diagrams, and real-life use cases.</p>"},{"location":"angular/017/#angular-signals","title":"\u26a1 Angular Signals","text":""},{"location":"angular/017/#simple-definition","title":"\ud83d\udd39 Simple Definition","text":"<ul> <li>Signals in Angular are a reactive primitive for state management.</li> <li>They allow you to track changes in state and automatically update the UI or dependent computations when the state changes.</li> <li>Think of Signals as reactive variables that Angular can observe.</li> </ul>"},{"location":"angular/017/#key-points","title":"\ud83d\udd39 Key Points","text":"<ul> <li>Signals replace or complement traditional <code>@Input</code> + <code>EventEmitter</code> patterns.</li> <li>Fine-grained reactivity \u2192 only components or computations depending on the signal are updated.</li> <li>Improve performance by avoiding unnecessary change detection.</li> <li>Signals can be read, written, and computed.</li> <li>Works well with Angular 16+ reactive features.</li> </ul>"},{"location":"angular/017/#creating-signals","title":"\ud83d\udd39 Creating Signals","text":"<pre><code>import { signal, computed } from '@angular/core';\n\nconst count = signal(0); // create a signal with initial value 0\n\n// Reading signal value\nconsole.log(count()); // 0\n\n// Updating signal value\ncount.set(5);\nconsole.log(count()); // 5\n\n// Incrementing\ncount.update(c =&gt; c + 1);\nconsole.log(count()); // 6\n</code></pre>"},{"location":"angular/017/#computed-signals","title":"\ud83d\udd39 Computed Signals","text":"<ul> <li>Computed signals automatically react to dependent signals.</li> </ul> <pre><code>const count = signal(1);\nconst double = computed(() =&gt; count() * 2);\n\nconsole.log(double()); // 2\n\ncount.set(5);\nconsole.log(double()); // 10\n</code></pre>"},{"location":"angular/017/#using-signals-in-angular-component","title":"\ud83d\udd39 Using Signals in Angular Component","text":"<pre><code>import { Component, signal, computed } from '@angular/core';\n\n@Component({\n  selector: 'app-counter',\n  template: `\n    &lt;h2&gt;Counter: {{ counter() }}&lt;/h2&gt;\n    &lt;h3&gt;Double: {{ doubleCounter() }}&lt;/h3&gt;\n    &lt;button (click)=\"increment()\"&gt;Increment&lt;/button&gt;\n  `\n})\nexport class CounterComponent {\n  counter = signal(0);\n  doubleCounter = computed(() =&gt; this.counter() * 2);\n\n  increment() {\n    this.counter.update(c =&gt; c + 1);\n  }\n}\n</code></pre>"},{"location":"angular/017/#real-life-use-cases","title":"\ud83d\udd39 Real-life Use Cases","text":"<ul> <li>Gmail: Track the number of unread emails \u2192 automatically update the UI badge.</li> <li>Jira: Track live issue count or status changes \u2192 reactive updates in the dashboard.</li> <li>E-commerce: Update cart total when an item is added or removed \u2192 UI updates automatically.</li> <li>Forms: Track dynamic form state and validations.</li> </ul>"},{"location":"angular/017/#diagram","title":"\ud83d\udd39 Diagram","text":"<pre><code>Signal (Reactive Variable)\n        |\n        v\nComponent / Computed Signal\n        |\n        v\nAutomatic UI Update on Value Change\n</code></pre>"},{"location":"angular/017/#benefits","title":"\ud83d\udd39 Benefits","text":"Benefit Description Fine-grained reactivity Only updates parts of UI that depend on the signal Better performance Avoids full change detection cycles Predictable state Signals encapsulate state in a single reactive variable Easy to use Simple API: get, set, update, computed <p>\u2705 Takeaway:</p> <ul> <li>Signals are Angular\u2019s new reactive primitive.</li> <li>Perfect for state management, reactive computations, and UI updates.</li> <li>They help reduce change detection overhead and improve application performance.</li> </ul> <p>Great question \ud83d\udc4d Let\u2019s make a clear comparison between Angular Signals and RxJS so you can put it in your docs. I\u2019ll cover:</p> <ul> <li>Simple Definition</li> <li>Key Points</li> <li>Side-by-side Comparison Table</li> <li>When to use Signals vs RxJS</li> <li>Real-life examples</li> </ul>"},{"location":"angular/017/#signals-vs-rxjs","title":"\u26a1 Signals vs RxJS","text":""},{"location":"angular/017/#simple-definitions","title":"\ud83d\udd39 Simple Definitions","text":"<ul> <li>Signals \u2192 A reactive variable that holds a single value and automatically notifies dependents when the value changes.</li> <li>RxJS (Observables) \u2192 A stream of asynchronous values/events over time that you can subscribe to and transform.</li> </ul>"},{"location":"angular/017/#key-points_1","title":"\ud83d\udd39 Key Points","text":"<p>Signals</p> <ul> <li>Store a single reactive value (like <code>count = 5</code>).</li> <li>Built into Angular (v16+).</li> <li>Best for local state (form inputs, counters, UI toggles).</li> <li>Easy to use: <code>get()</code>, <code>set()</code>, <code>update()</code>.</li> <li>Fine-grained reactivity: only dependent parts re-render.</li> </ul> <p>RxJS (Observables)</p> <ul> <li>Handle multiple async events over time (like WebSocket messages, HTTP streams).</li> <li>Powerful operators (<code>map</code>, <code>filter</code>, <code>merge</code>, etc.).</li> <li>Best for asynchronous streams (API calls, real-time updates).</li> <li>Requires subscription/unsubscription.</li> <li>Steeper learning curve, but more powerful.</li> </ul>"},{"location":"angular/017/#comparison-table","title":"\ud83d\udd39 Comparison Table","text":"Feature Signals RxJS (Observables) Data type Single reactive value (state) Stream of multiple values/events over time Angular support Native from Angular 16 External library (RxJS, bundled with Angular) Use case Local state management, UI counters, simple reactivity Async data (HTTP, WebSockets), complex data flows API simplicity Very simple: <code>set()</code>, <code>update()</code>, <code>computed()</code> Large API with 100+ operators Change detection Fine-grained reactivity (only dependents re-render) Triggers Angular zone \u2192 might cause broader change detection Subscription No subscription needed \u2192 automatic tracking Requires manual <code>.subscribe()</code> and cleanup Memory mgmt Handled automatically Must unsubscribe (or use <code>async pipe</code>) Learning curve Beginner-friendly Steeper learning curve Real-time data Not ideal for continuous streams Perfect for streams (chat, stock prices, logs) Performance Faster for local UI state updates Scales well for async/multi-event scenarios"},{"location":"angular/017/#when-to-use","title":"\ud83d\udd39 When to Use","text":"<p>\u2705 Use Signals when\u2026</p> <ul> <li>Managing local state inside a component.</li> <li>Example: counter, form values, sidebar toggle, cart item count.</li> <li>You want easy and fine-grained reactivity.</li> </ul> <p>\u2705 Use RxJS when\u2026</p> <ul> <li>Handling asynchronous data streams.</li> <li>Example: live chat (WebSocket), API polling, multiple API calls combined.</li> <li>You need operators like <code>mergeMap</code>, <code>switchMap</code>, <code>combineLatest</code>.</li> </ul> <p>\ud83d\udc49 Best Practice:</p> <ul> <li>Use Signals for UI state.</li> <li>Use RxJS for async/event-driven workflows.</li> <li>You can even combine them (convert Observables \u2192 Signals).</li> </ul>"},{"location":"angular/017/#real-life-examples","title":"\ud83d\udd39 Real-life Examples","text":"<p>Signals Example (Counter UI):</p> <pre><code>counter = signal(0);\n\nincrement() {\n  this.counter.update(c =&gt; c + 1);\n}\n</code></pre> <p>RxJS Example (Live Notifications like Gmail):</p> <pre><code>this.notifications$ = this.http.get('/api/notifications')\n  .pipe(retry(3), shareReplay(1));\n\nthis.notifications$.subscribe(data =&gt; console.log(data));\n</code></pre> <p>\u2705 Takeaway:</p> <ul> <li>Signals = Simple, synchronous, local state.</li> <li>RxJS = Complex, asynchronous, multi-value streams.</li> <li>Together \u2192 cover both local reactivity and async event handling.</li> </ul>"},{"location":"angular/018/","title":"State Mgmt","text":"<p>Great question \ud83d\udc4d Let\u2019s make a clear comparison between Angular Signals and RxJS so you can put it in your docs. I\u2019ll cover:</p> <ul> <li>Simple Definition</li> <li>Key Points</li> <li>Side-by-side Comparison Table</li> <li>When to use Signals vs RxJS</li> <li>Real-life examples</li> </ul>"},{"location":"angular/018/#signals-vs-rxjs","title":"\u26a1 Signals vs RxJS","text":""},{"location":"angular/018/#simple-definitions","title":"\ud83d\udd39 Simple Definitions","text":"<ul> <li>Signals \u2192 A reactive variable that holds a single value and automatically notifies dependents when the value changes.</li> <li>RxJS (Observables) \u2192 A stream of asynchronous values/events over time that you can subscribe to and transform.</li> </ul>"},{"location":"angular/018/#key-points","title":"\ud83d\udd39 Key Points","text":"<p>Signals</p> <ul> <li>Store a single reactive value (like <code>count = 5</code>).</li> <li>Built into Angular (v16+).</li> <li>Best for local state (form inputs, counters, UI toggles).</li> <li>Easy to use: <code>get()</code>, <code>set()</code>, <code>update()</code>.</li> <li>Fine-grained reactivity: only dependent parts re-render.</li> </ul> <p>RxJS (Observables)</p> <ul> <li>Handle multiple async events over time (like WebSocket messages, HTTP streams).</li> <li>Powerful operators (<code>map</code>, <code>filter</code>, <code>merge</code>, etc.).</li> <li>Best for asynchronous streams (API calls, real-time updates).</li> <li>Requires subscription/unsubscription.</li> <li>Steeper learning curve, but more powerful.</li> </ul>"},{"location":"angular/018/#comparison-table","title":"\ud83d\udd39 Comparison Table","text":"Feature Signals RxJS (Observables) Data type Single reactive value (state) Stream of multiple values/events over time Angular support Native from Angular 16 External library (RxJS, bundled with Angular) Use case Local state management, UI counters, simple reactivity Async data (HTTP, WebSockets), complex data flows API simplicity Very simple: <code>set()</code>, <code>update()</code>, <code>computed()</code> Large API with 100+ operators Change detection Fine-grained reactivity (only dependents re-render) Triggers Angular zone \u2192 might cause broader change detection Subscription No subscription needed \u2192 automatic tracking Requires manual <code>.subscribe()</code> and cleanup Memory mgmt Handled automatically Must unsubscribe (or use <code>async pipe</code>) Learning curve Beginner-friendly Steeper learning curve Real-time data Not ideal for continuous streams Perfect for streams (chat, stock prices, logs) Performance Faster for local UI state updates Scales well for async/multi-event scenarios"},{"location":"angular/018/#when-to-use","title":"\ud83d\udd39 When to Use","text":"<p>\u2705 Use Signals when\u2026</p> <ul> <li>Managing local state inside a component.</li> <li>Example: counter, form values, sidebar toggle, cart item count.</li> <li>You want easy and fine-grained reactivity.</li> </ul> <p>\u2705 Use RxJS when\u2026</p> <ul> <li>Handling asynchronous data streams.</li> <li>Example: live chat (WebSocket), API polling, multiple API calls combined.</li> <li>You need operators like <code>mergeMap</code>, <code>switchMap</code>, <code>combineLatest</code>.</li> </ul> <p>\ud83d\udc49 Best Practice:</p> <ul> <li>Use Signals for UI state.</li> <li>Use RxJS for async/event-driven workflows.</li> <li>You can even combine them (convert Observables \u2192 Signals).</li> </ul>"},{"location":"angular/018/#real-life-examples","title":"\ud83d\udd39 Real-life Examples","text":"<p>Signals Example (Counter UI):</p> <pre><code>counter = signal(0);\n\nincrement() {\n  this.counter.update(c =&gt; c + 1);\n}\n</code></pre> <p>RxJS Example (Live Notifications like Gmail):</p> <pre><code>this.notifications$ = this.http.get('/api/notifications')\n  .pipe(retry(3), shareReplay(1));\n\nthis.notifications$.subscribe(data =&gt; console.log(data));\n</code></pre> <p>\u2705 Takeaway:</p> <ul> <li>Signals = Simple, synchronous, local state.</li> <li>RxJS = Complex, asynchronous, multi-value streams.</li> <li>Together \u2192 cover both local reactivity and async event handling.</li> </ul>"},{"location":"angular/020/","title":"NgRx","text":"<p>Perfect \u2705 Let\u2019s create a full, comprehensive documentation for NgRx in Angular for your reference, including definition, key points, architecture, code examples, real-life use cases, diagrams, and best practices.</p>"},{"location":"angular/020/#angular-ngrx","title":"\u26a1 Angular NgRx","text":""},{"location":"angular/020/#simple-definition","title":"\ud83d\udd39 Simple Definition","text":"<ul> <li>NgRx is a state management library for Angular applications that implements the Redux pattern using RxJS.</li> <li>It provides a centralized store for the application state and ensures predictable state changes using actions, reducers, selectors, and effects.</li> </ul>"},{"location":"angular/020/#key-points","title":"\ud83d\udd39 Key Points","text":"<ul> <li>Centralized single source of truth for the application state.</li> <li>State is immutable \u2192 always updated via pure functions called reducers.</li> <li>Uses RxJS Observables for reactive state changes.</li> <li>Enables time-travel debugging and better testing.</li> <li>Well-suited for large-scale applications with multiple shared states.</li> <li>Works with NgRx DevTools for debugging state changes.</li> </ul>"},{"location":"angular/020/#core-concepts-architecture","title":"\ud83d\udd39 Core Concepts / Architecture","text":"Concept Definition Store Holds the entire application state. Components subscribe to the store. Action A payload of information describing a change (e.g., <code>AddItem</code>). Reducer Pure function that updates the state based on action. Selector Functions to select specific slices of state from the store. Effect Handles side effects, like API calls or asynchronous operations."},{"location":"angular/020/#flow-diagram","title":"\ud83d\udd39 Flow Diagram","text":"<pre><code>User Interaction / Event\n        |\n        v\n      Action -----------------------------+\n        |                                 |\n        v                                 |\n     Reducer (pure function)              |\n        |                                 |\n        v                                 |\n      Store ------------------------&gt; Selectors\n        |                                 |\n        v                                 v\n    Component UI &lt;------------------ Subscription (Observables)\n</code></pre>"},{"location":"angular/020/#installation","title":"\ud83d\udd39 Installation","text":"<pre><code>ng add @ngrx/store@latest\nng add @ngrx/effects@latest\nng add @ngrx/store-devtools@latest\n</code></pre>"},{"location":"angular/020/#example-simple-counter","title":"\ud83d\udd39 Example: Simple Counter","text":""},{"location":"angular/020/#1-action","title":"1\ufe0f\u20e3 Action","text":"<pre><code>// counter.actions.ts\nimport { createAction } from '@ngrx/store';\n\nexport const increment = createAction('[Counter] Increment');\nexport const decrement = createAction('[Counter] Decrement');\nexport const reset = createAction('[Counter] Reset');\n</code></pre>"},{"location":"angular/020/#2-reducer","title":"2\ufe0f\u20e3 Reducer","text":"<pre><code>// counter.reducer.ts\nimport { createReducer, on } from '@ngrx/store';\nimport { increment, decrement, reset } from './counter.actions';\n\nexport const initialState = 0;\n\nexport const counterReducer = createReducer(\n  initialState,\n  on(increment, state =&gt; state + 1),\n  on(decrement, state =&gt; state - 1),\n  on(reset, state =&gt; 0)\n);\n</code></pre>"},{"location":"angular/020/#3-selector","title":"3\ufe0f\u20e3 Selector","text":"<pre><code>// counter.selector.ts\nimport { createSelector, createFeatureSelector } from '@ngrx/store';\n\nexport const selectCounter = createFeatureSelector&lt;number&gt;('counter');\n</code></pre>"},{"location":"angular/020/#4-component","title":"4\ufe0f\u20e3 Component","text":"<pre><code>// counter.component.ts\nimport { Component } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { increment, decrement, reset } from './counter.actions';\nimport { selectCounter } from './counter.selector';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-counter',\n  template: `\n    &lt;h2&gt;Counter: {{ counter$ | async }}&lt;/h2&gt;\n    &lt;button (click)=\"increment()\"&gt;Increment&lt;/button&gt;\n    &lt;button (click)=\"decrement()\"&gt;Decrement&lt;/button&gt;\n    &lt;button (click)=\"reset()\"&gt;Reset&lt;/button&gt;\n  `\n})\nexport class CounterComponent {\n  counter$: Observable&lt;number&gt;;\n\n  constructor(private store: Store) {\n    this.counter$ = store.select(selectCounter);\n  }\n\n  increment() { this.store.dispatch(increment()); }\n  decrement() { this.store.dispatch(decrement()); }\n  reset() { this.store.dispatch(reset()); }\n}\n</code></pre>"},{"location":"angular/020/#example-with-api-call-effect","title":"\ud83d\udd39 Example with API Call (Effect)","text":"<pre><code>// user.actions.ts\nexport const loadUsers = createAction('[User] Load Users');\nexport const loadUsersSuccess = createAction('[User] Load Users Success', props&lt;{ users: any[] }&gt;());\n</code></pre> <pre><code>// user.effects.ts\nimport { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { HttpClient } from '@angular/common/http';\nimport { loadUsers, loadUsersSuccess } from './user.actions';\nimport { map, mergeMap } from 'rxjs/operators';\n\n@Injectable()\nexport class UserEffects {\n  loadUsers$ = createEffect(() =&gt;\n    this.actions$.pipe(\n      ofType(loadUsers),\n      mergeMap(() =&gt; this.http.get&lt;any[]&gt;('/api/users')\n        .pipe(map(users =&gt; loadUsersSuccess({ users }))))\n    )\n  );\n\n  constructor(private actions$: Actions, private http: HttpClient) {}\n}\n</code></pre>"},{"location":"angular/020/#real-life-use-cases","title":"\ud83d\udd39 Real-life Use Cases","text":"<ul> <li> <p>Gmail:</p> </li> <li> <p>Manage global state for emails, labels, notifications, and user preferences.</p> </li> <li> <p>Jira:</p> </li> <li> <p>Store project data, tickets, filters, and user sessions centrally.</p> </li> <li> <p>E-commerce:</p> </li> <li> <p>Cart items, product catalog, user authentication, and checkout state.</p> </li> </ul>"},{"location":"angular/020/#benefits","title":"\ud83d\udd39 Benefits","text":"Benefit Description Predictable State All state changes go through actions &amp; reducers. Debuggable Supports NgRx DevTools, time-travel debugging. Reactive Works seamlessly with RxJS and Observables. Scalable Ideal for large applications with multiple shared states. Testable Reducers are pure functions \u2192 easy unit testing. <p>\u2705 Takeaways:</p> <ul> <li>NgRx = Redux + RxJS for Angular</li> <li>Best suited for large-scale applications with complex global state.</li> <li>Works well alongside Angular Signals for local state.</li> <li>Improves predictability, testability, and developer experience.</li> </ul>"},{"location":"angular/020/#signals-vs-rxjs-vs-ngrx-state-management","title":"\u26a1 Signals vs RxJS vs NgRx (State Management)","text":"Feature / Criteria Signals RxJS (Observables) NgRx Definition Reactive primitive for a single value/state Stream of asynchronous values/events Redux-inspired centralized state management with actions, reducers, and selectors Type of State Local / Global Async / Global / Local Global / Shared Use Case UI state, counters, forms, toggles Async streams, API responses, WebSocket events Large-scale apps with complex shared state Data Source Single value / computed value Multiple async events over time Centralized store, dispatched actions Change Detection Fine-grained, only dependent parts update Triggers Angular zone, may affect full change detection Store updates propagate via selectors (observable streams) Learning Curve Easy / Beginner-friendly Moderate / Needs understanding of RxJS operators Steeper / Requires understanding of Redux pattern Subscriptions Not needed Required (<code>subscribe</code> / <code>async</code> pipe) Required in component via <code>store.select</code> Mutability Mutable via <code>set()</code>, <code>update()</code> Immutable streams, transform via operators Immutable state, updated via actions/reducers Performance High for local state, minimal change detection overhead Moderate, depends on stream and subscription management Scales well for global state but overhead in large apps Debugging Simple console logging, easier to trace values Use RxJS debugging operators (<code>tap</code>, <code>debug</code>) NgRx DevTools, time-travel debugging, inspect actions Integration with Angular Native (Angular 16+) Native (RxJS bundled with Angular) Official library for Angular Real-life Examples Cart count, toggle button, unread email badge API polling, WebSocket chat, live notifications Gmail inbox state, Jira project/issue tracking, e-commerce cart &amp; catalog"},{"location":"angular/020/#takeaways","title":"\ud83d\udd39 Takeaways","text":"<ul> <li> <p>Signals:</p> </li> <li> <p>Best for local state or simple reactive values.</p> </li> <li> <p>Minimal boilerplate, automatic reactivity.</p> </li> <li> <p>RxJS:</p> </li> <li> <p>Best for async streams, API calls, real-time updates.</p> </li> <li> <p>Provides powerful operators for transforming streams.</p> </li> <li> <p>NgRx:</p> </li> <li> <p>Best for large applications with complex global/shared state.</p> </li> <li>Provides predictable state, time-travel debugging, and structured architecture.</li> </ul> <p>Perfect \u2705 Let\u2019s create a visual diagram for Angular State Management showing Signals, RxJS, and NgRx together. This will clearly demonstrate how each is used in an Angular app.</p>"},{"location":"angular/020/#angular-state-management-diagram","title":"\ud83d\uddc2\ufe0f Angular State Management Diagram","text":"<pre><code>                +-------------------------------+\n                |        Angular App            |\n                +-------------------------------+\n                           |\n           ---------------------------------------\n           |                 |                   |\n           v                 v                   v\n   +---------------+   +---------------+   +---------------+\n   |   Signals     |   |    RxJS       |   |     NgRx      |\n   +---------------+   +---------------+   +---------------+\n   | Local / UI    |   | Async streams |   | Global / Shared|\n   | state         |   | (HTTP, WS)    |   | centralized   |\n   | Examples:     |   | Examples:     |   | state store   |\n   | - Counter     |   | - API Polling |   | Examples:     |\n   | - Toggle      |   | - Live chat   |   | - Gmail Inbox |\n   | - Badge       |   | - Notifications|  | - Jira Projects|\n   +---------------+   +---------------+   +---------------+\n           |                 |                   |\n           v                 v                   v\n    UI updates only   Subscribed to streams   Components select data\n    where signal is   and async events        from centralized store\n    used             handled reactively\n</code></pre>"},{"location":"angular/020/#how-it-works-together","title":"\ud83d\udd39 How It Works Together","text":"<ol> <li> <p>Signals (local state):</p> </li> <li> <p>Tracks component-specific values like a counter or UI toggle.</p> </li> <li> <p>Fine-grained reactivity ensures minimal re-rendering.</p> </li> <li> <p>RxJS (async streams):</p> </li> <li> <p>Handles external asynchronous data like API calls, WebSocket messages, or timers.</p> </li> <li> <p>Components subscribe to Observables to react to changes.</p> </li> <li> <p>NgRx (global state):</p> </li> <li> <p>Stores centralized shared state across multiple components/pages.</p> </li> <li>Actions \u2192 Reducers \u2192 Store \u2192 Selectors \u2192 Component UI updates.</li> </ol> <p>\u2705 Takeaways:</p> <ul> <li>Signals \u2192 local reactive state.</li> <li>RxJS \u2192 asynchronous event streams.</li> <li>NgRx \u2192 global/shared application state.</li> <li>Combined \u2192 full reactive and predictable Angular app.</li> </ul> <p>Perfect \u2705 Let\u2019s create a real-life Gmail example diagram showing how Signals, RxJS, and NgRx work together in an Angular app. This will be very clear for your documentation.</p>"},{"location":"angular/020/#gmail-example-state-management-in-angular","title":"\ud83d\udce8 Gmail Example: State Management in Angular","text":"<pre><code>                       +-----------------------------+\n                       |       Gmail Angular App     |\n                       +-----------------------------+\n                                    |\n                 ------------------------------------------\n                 |                    |                   |\n                 v                    v                   v\n           +-------------+      +-------------+     +----------------+\n           |  Signals    |      |   RxJS      |     |     NgRx       |\n           +-------------+      +-------------+     +----------------+\n           | Local UI    |      | Async Streams|    | Global State   |\n           | State       |      |              |    |                |\n           | Examples:   |      | Examples:    |    | Examples:      |\n           | - Sidebar   |      | - New email  |    | - User profile |\n           |   toggle    |      |   notifications | | - Labels       |\n           | - Compose   |      | - Real-time chat| | - Inbox emails |\n           |   draft     |      | - Live typing   | | - Filters      |\n           +-------------+      +-------------+     +----------------+\n                 |                    |                   |\n                 v                    v                   v\n           UI updates only     Subscribed to streams  Components select data\n           where signal is     (auto re-render)       from centralized store\n           used\n\n</code></pre>"},{"location":"angular/020/#flow-example-in-gmail","title":"\ud83d\udd39 Flow Example in Gmail","text":"<ol> <li> <p>Signals (Local UI State)</p> </li> <li> <p>Sidebar open/close toggle \u2192 updates only sidebar component.</p> </li> <li> <p>Compose draft text \u2192 updates compose box locally.</p> </li> <li> <p>RxJS (Async Streams)</p> </li> <li> <p>New email notifications \u2192 WebSocket stream updates inbox badge.</p> </li> <li> <p>Real-time chat in Hangouts \u2192 Observable streams update chat UI instantly.</p> </li> <li> <p>NgRx (Global State)</p> </li> <li> <p>Centralized store for:</p> <ul> <li>Logged-in user profile</li> <li>Inbox email list</li> <li>Labels and filters</li> <li>Components select the relevant slice from store \u2192 UI updates automatically.</li> </ul> </li> </ol> <p>\u2705 Takeaways:</p> <ul> <li>Signals: Handles component-specific state, minimal rendering.</li> <li>RxJS: Handles async real-time streams.</li> <li>NgRx: Handles application-wide shared state.</li> <li>Together \u2192 Gmail Angular app is reactive, performant, and predictable.</li> </ul>"},{"location":"webpack/","title":"Webpack","text":"<p>Webpack is a module bundler for JavaScript applications. It takes JavaScript, CSS, images, and other dependencies required to run your project, and bundles them into optimized files (single or multiple) that browsers can run efficiently.  </p> <p>\u2705 It reduces HTTP requests by bundling files together. \u2705 By default, it only bundles JavaScript files. \u2705 To include other file types, we use loaders.  </p>"},{"location":"webpack/#why-webpack-problems-it-solves","title":"Why Webpack? (Problems It Solves)","text":""},{"location":"webpack/#before-webpack","title":"Before Webpack","text":"<ul> <li>Many <code>&lt;script&gt;</code> tags in HTML \u2192 slow + hard to manage.  </li> <li>File order problems (dependencies had to load correctly).  </li> <li>Everything was global \u2192 naming conflicts.  </li> <li>Performance issues (many small files, no optimization).  </li> </ul>"},{"location":"webpack/#with-webpack","title":"With Webpack","text":"<ul> <li>\u2705 Bundles everything into 1 (or a few) files.  </li> <li>\u2705 Handles dependencies automatically.  </li> <li>\u2705 Supports ES6 import/export.  </li> <li>\u2705 Lets you use CSS, images, and fonts inside JS.  </li> <li>\u2705 Optimizes code (minification, caching, code splitting).  </li> </ul>"},{"location":"webpack/#how-webpack-works","title":"How Webpack Works","text":"<ul> <li>Defines an entry point \u2192 where bundling starts (e.g., <code>index.js</code>).  </li> <li>Builds a dependency graph \u2192 tracks imports and bundles only what\u2019s needed.  </li> <li>Removes unused code (tree-shaking).  </li> <li>Produces an output bundle (e.g., <code>bundle.js</code>).  </li> </ul> <p>\ud83d\udca1 Example: If a module has 50 methods but you only use 5, Webpack bundles only those 5 methods.  </p>"},{"location":"webpack/#beginner-friendly-example","title":"Beginner Friendly Example","text":"<p>Project Structure</p> <pre><code>\nmy-app/\n\u251c\u2500\u2500 src/\n\u2502    \u251c\u2500\u2500 index.js\n\u2502    \u2514\u2500\u2500 message.js\n\u251c\u2500\u2500 dist/\n\u2502    \u2514\u2500\u2500 index.html\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 webpack.config.js\n\n````\n\n### `src/message.js`\n```js\nexport function getMessage() {\n  return \"Hello Webpack \ud83d\ude80\";\n}\n````\n\n### `src/index.js`\n\n```js\nimport { getMessage } from \"./message.js\";\n\ndocument.getElementById(\"app\").textContent = getMessage();\n</code></pre>"},{"location":"webpack/#webpackconfigjs","title":"<code>webpack.config.js</code>","text":"<pre><code>const path = require(\"path\");\n\nmodule.exports = {\n  entry: \"./src/index.js\",   // Entry point\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"bundle.js\"    // Output file\n  },\n  mode: \"development\"\n};\n</code></pre>"},{"location":"webpack/#run","title":"Run","text":"<pre><code>npm install webpack webpack-cli --save-dev\nnpx webpack --config webpack.config.js\n</code></pre>"},{"location":"webpack/#output","title":"Output","text":"<p>\ud83d\udc49 <code>bundle.js</code> created inside <code>dist/</code> \ud83d\udc49 Open <code>index.html</code> \u2192 shows \"Hello Webpack \ud83d\ude80\"</p>"},{"location":"webpack/#advanced-example-css-images","title":"Advanced Example (CSS + Images)","text":""},{"location":"webpack/#extra-files","title":"Extra Files","text":"<pre><code>src/style.css\nsrc/logo.png\n</code></pre>"},{"location":"webpack/#srcstylecss","title":"<code>src/style.css</code>","text":"<pre><code>body {\n  background: #f0f0f0;\n  text-align: center;\n}\nh1 {\n  color: darkblue;\n}\n</code></pre>"},{"location":"webpack/#srcindexjs","title":"<code>src/index.js</code>","text":"<pre><code>import { getMessage } from \"./message.js\";\nimport \"./style.css\";         // Import CSS\nimport logo from \"./logo.png\"; // Import Image\n\ndocument.getElementById(\"app\").textContent = getMessage();\n\nconst img = document.createElement(\"img\");\nimg.src = logo;\nimg.width = 150;\ndocument.body.appendChild(img);\n</code></pre>"},{"location":"webpack/#install-loaders","title":"Install Loaders","text":"<pre><code>npm install style-loader css-loader file-loader --save-dev\n</code></pre>"},{"location":"webpack/#webpackconfigjs_1","title":"<code>webpack.config.js</code>","text":"<pre><code>const path = require(\"path\");\n\nmodule.exports = {\n  entry: \"./src/index.js\",\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"bundle.js\"\n  },\n  mode: \"development\",\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,          // For CSS files\n        use: [\"style-loader\", \"css-loader\"]\n      },\n      {\n        test: /\\.(png|jpg|gif)$/, // For images\n        use: [\n          {\n            loader: \"file-loader\",\n            options: {\n              name: \"[name].[hash].[ext]\",\n              outputPath: \"images\"\n            }\n          }\n        ]\n      }\n    ]\n  }\n};\n</code></pre>"},{"location":"webpack/#run-build","title":"Run Build","text":"<pre><code>npx webpack --config webpack.config.js\n</code></pre>"},{"location":"webpack/#output_1","title":"Output","text":"<p>\ud83d\udc49 Webpack copies <code>logo.png</code> into <code>dist/images/</code> \ud83d\udc49 CSS is injected automatically \ud83d\udc49 <code>bundle.js</code> now contains JS + CSS + image references</p>"},{"location":"webpack/#webpack-modes","title":"Webpack Modes","text":"<ul> <li><code>mode: \"development\"</code> \u2192 readable, useful for debugging</li> <li><code>mode: \"production\"</code> \u2192 minified, optimized for deployment</li> </ul> <p>```</p>"}]}